<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JDDFE</title>
  
  <subtitle>just do devFE</subtitle>
  <link href="https://blog.jddfe.com/atom.xml" rel="self"/>
  
  <link href="https://blog.jddfe.com/"/>
  <updated>2020-11-16T16:10:55.404Z</updated>
  <id>https://blog.jddfe.com/</id>
  
  <author>
    <name>Esmiler</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基金投资新手入门科普宝典</title>
    <link href="https://blog.jddfe.com/2020/11/14/%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E7%A7%91%E6%99%AE%E5%AE%9D%E5%85%B8/"/>
    <id>https://blog.jddfe.com/2020/11/14/%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%96%B0%E6%89%8B%E5%85%A5%E9%97%A8%E7%A7%91%E6%99%AE%E5%AE%9D%E5%85%B8/</id>
    <published>2020-11-14T15:06:10.000Z</published>
    <updated>2020-11-16T16:10:55.404Z</updated>
    
    <content type="html"><![CDATA[<p>网上关于基金投资教学的文章有很多，但都太过于专业，太过于繁琐，今天就用简单直白的内容重新认识基金。</p><p><strong>直接告诉你 怎么买、买多少、怎么卖</strong></p><p>开始前先了解下基金的分类</p><h2 id="基金的分类"><a href="#基金的分类" class="headerlink" title="基金的分类"></a>基金的分类</h2><p>注：以下提到的收益率为有专业操作经验的普通投资者的近一年预估收益率。</p><ul><li><strong>货币型基金：</strong>是以银行存款，短期债券保本型产品为主的类型，一般收益在 2.5%-3.5% 低风险，比如我们常用的余额宝和天天基金的活期宝，适合1年内的资金打理，随取随用。</li><li><strong>债券型基金：</strong>成分80%以上是国债和企业债，收益在6%-8%，中风险，纯债基金100%投资于债券，不碰股票。特点是波动小，收益比较稳定。适合1-2年资金的打理。</li><li><strong>混合型基金：</strong>成分现金、债券、股票都有，进可攻退可守，非常灵活，收益在10%-13%中高风险</li><li><strong>股票型基金：</strong>成分80%以上是股票，收益在12%-30%+，高风险。</li><li><strong>指数型基金（被动型基金）：</strong>不主动寻求取得超越市场的表现，而是试图复制指数的表现。一般选取特定的指数作为跟踪的对象，因此通常又被称为“指数型基金”。相当于在股票市场上，把每种股票都买一点，最后追求一个市场平均收益率的基金。</li><li><strong>ＥＴＦ：</strong>交易型开放指数基金，通常又称为“交易所交交易基金”，是一种在交易所上市交易的、基金份额可变的一种开放式基金。</li><li><strong>ＬＯＦ：</strong>上市开放式基金，是一种既可以在场外市场进行基金份额申购赎回，又可以在交易所（场内市场）进行基金份额交易和基金反而二申购或赎回的开放式基金。是我国对证券投资基金的一种本土化创新。</li></ul><h5 id="国内的一些指数"><a href="#国内的一些指数" class="headerlink" title="国内的一些指数"></a>国内的一些指数</h5><ul><li>上证50指数：就是把上交所规模最大、流动性最好的50家公司的股票组合在一起。</li><li>沪深300指数：就是把上交所和深交所前300只规模最大、流动最好的300家公司的股票组合在一起。</li><li>中证500指数：把沪深300指数的前300家大公司排除，剩下的大公司中再选前500只规模最大、流动最好的500家公司的股票统计起来的股票组合在一起。</li><li>上证红利指数：从上交所的股票中，挑选现金分红最高的 50 家公司股票组合在一起。 时间越长，分红越高。</li><li>创业板指数：限制了成分股的数量，只从创业板上市公司中，挑选出规模最大、流动性最好的100只股票。</li></ul><p>接下来直接进入主题，这里就不介绍平台和开户相关前提了</p><h2 id="一、怎么买？"><a href="#一、怎么买？" class="headerlink" title="一、怎么买？"></a>一、怎么买？</h2><p>基金投资的第一步就是选到优秀并且适合自己的基金，上面介绍了基金的分类了，那接下来直接说说如何选基金。</p><p>长期投资建议：<strong>混合型基金和股票型基金，其次债券型基金</strong></p><p>接下来，解释一下原因：</p><h4 id="（1）货币型基金"><a href="#（1）货币型基金" class="headerlink" title="（1）货币型基金"></a>（1）货币型基金</h4><p><strong>首先排除掉余额宝等货币型基金，因为收益率过低，甚至跑不赢通货膨胀，不予考虑。</strong></p><h4 id="（2）债券型基金"><a href="#（2）债券型基金" class="headerlink" title="（2）债券型基金"></a>（2）债券型基金</h4><p>债券型基金在一年期内，取得正收益率的概率大于股票型基金，但是<strong>其长期和平均收益率要远低于股票型基金</strong>。</p><p>如果选择长期投资<strong>自然是股票型基金更适合。</strong></p><h4 id="（3）主动型与被动型基金"><a href="#（3）主动型与被动型基金" class="headerlink" title="（3）主动型与被动型基金"></a>（3）主动型与被动型基金</h4><p>取舍了股票型和债券型，我们接下来看看<strong>股票型基金、混合型基金（二者统称为主动型基金）与指数基金（被动型基金）的对比。</strong></p><blockquote><p>巴菲特说过：“一个什么都不懂的投资者，通过定投指数型基金，就可以战胜大多数的专业投资者。”</p></blockquote><p>这句话确实是金玉良言，但是那是在美国的市场上。</p><p><strong>美国市场处于机构博弈的状态</strong>，就是基金和基金打架，能从中脱颖而出，战胜大盘平均成绩的基金自然是不多；</p><p>但是<strong>在中国市场上，是机构和散户博弈</strong>，目前市场上<strong>近7成的交易量由散户提供</strong>，那些基金工作机构相对于散户来说，处于信息和技术层面的绝对优势，</p><p>我们再看看数据统计：</p><p><img src="https://pic2.zhimg.com/50/v2-34f455f4e76229506ce0f1c25d115726_hd.jpg?source=1940ef5c"></p><p><img src="https://pic2.zhimg.com/80/v2-34f455f4e76229506ce0f1c25d115726_1440w.jpg?source=1940ef5c"></p><p>被许多人吹捧的指数型基金的年化收益率甚至低于债券基金，并且风险（波动率）还要更大。</p><p><strong>如果在中国你选择了指数基金，那就是实实在在的损失掉了一部分收益。</strong></p><p>好了，现在我们知道自己要买的是股票型基金和混合型基金了，那么接下来我们该怎么细选呢？</p><p><strong>毕竟这两种基金可有将近4000多只，我们怎么样才能选到那些能给我们带来长期稳定收益的基金呢？</strong></p><p><strong>既然说了是最直白的教程，那在这里就应该直接给大家一份名单，直截了当的告诉你，哪些基金是“陈年好基”</strong></p><p>我在这篇回答里，为你<strong>直接列举了中国最优秀的基金经理和他们的代表基金（全部都是经过5年以上牛熊市考验的老牌基金，长期平均年化收益率15%以上）</strong>，并且附有自主选择基金的方法：</p><p>链接：<a href="https://www.zhihu.com/question/373427508/answer/1467901892">国内优秀基金经理及其代表基金推荐</a></p><h4 id="（4）购买方式"><a href="#（4）购买方式" class="headerlink" title="（4）购买方式"></a>（4）购买方式</h4><p>好了，选择好基金后，我们就要开始购买了，那哪种购买方式最适合我们呢？</p><p>在讲这个问题前，我们要简单的说一下定投的原理：</p><p><strong>为了你更好地理解，请你陪我算一道很简单的计算题。</strong></p><blockquote><p>假如我们去菜市场买西红柿，每次买3000元，买三次。第一次买的价格是1.5元1斤，第二次是1元1斤，第三次是0.5元一斤  </p><p>问：买完3次后，你手中的西红柿成本是几元1斤？  </p><p>你可能就要说1元对吧，<strong>那让我们来仔细算算这笔账，一共买了3次，花了9000元，第一次买了2000斤，第二次买了3000斤，第三次买了6000斤</strong>  </p><p>细心的朋友到这里就发现了，<strong>实际上我们花了9000元，却买了11000斤西红柿。</strong>  </p><p><strong>当西红柿回到1元1斤时，总的来说虽然西红柿的价格没有上涨，但我们还是可以净赚2000元，</strong></p></blockquote><p><strong>这就是定投的魔力。</strong></p><p><img src="https://pic3.zhimg.com/50/v2-6dd9958c364f3ad01123764b4c126d25_hd.jpg?source=1940ef5c"></p><p><img src="https://pic3.zhimg.com/80/v2-6dd9958c364f3ad01123764b4c126d25_1440w.jpg?source=1940ef5c"></p><p>定投好处就在于<strong>①可以在低位时吸收更多筹码②克服人追涨杀跌的天性，规定买入时间。</strong></p><p>注意事项：</p><p>1、基金的选择和蔬菜一样也讲究荤素搭配、营养全面，我们不能只吃一样，<strong>建议你持有4-8只，就可以避免因为一个基金出现问题，而影响我们整体的收益率。</strong></p><p>2、<strong>不要买支付宝等软件主页面上推荐的基金</strong>，被推荐的基金都是在近期涨幅很大，看起来很诱人的基金，但是近期涨幅过大并不是好事，说明两个问题：</p><ul><li><p>①基金经理风格偏激进  </p></li><li><p>②该基金最近处于高位，后期很大可能跌落。所以一般购买这类基金，有很大的概率是当了接盘侠。</p></li></ul><h2 id="二、买多少"><a href="#二、买多少" class="headerlink" title="二、买多少"></a>二、买多少</h2><p>那么<strong>我们究竟应该买入多少呢？</strong>为了充分考虑到所有人，这里我分情况来说，请大家直接看适合自己的那部分即可。</p><p><strong>1、学生</strong></p><p>从现在开始，给自己定一个长期目标，明确标出每个月需要攒下来的钱。然后每月通过兼职或者从生活费中节省下来该金额。</p><p><strong>很多人会说学生不可以理财，钱少不可以理财，现在理财看似只能赚个几十，并且还有一定风险。</strong></p><p><strong>但其实不然，如果你能从现在开始积累理财经验，那这对你的后半生会是一个取之不尽的财富。</strong></p><p><strong>毕竟劳动无法致富，普通人财务自由的最佳方式，就是早点开始理财。</strong></p><p><strong>2、上班族</strong></p><p>将自己收入的10%攒下来，定投到你的基金组合当中，</p><p>如果你想拥有被动收入，并在未来的某一天脱离这种早出晚归的上班生活的话，建议你从现在开始播种理财。</p><p>同样的给自己列一个计划表，有了计划，我们才能一步一步的去实践。</p><p><strong>3、有一定/目标压力的人群</strong></p><p><strong>明确该目标的预算</strong>，然后根据这个数额，来决定每月定投金额以及定投时间。</p><p><strong>定投频率：两周一次最佳</strong>，每日一投会因为买入时间间隔过短，所以起不到摊低成本的作用，经数据测算，两周一投是收益率最高的方式。</p><p>注意事项：</p><p>1、短期内要用到的钱不能用于投资。</p><p>2、定投贵在坚持，每一次定投都是你在向财务自由迈步。</p><h2 id="三、怎么卖"><a href="#三、怎么卖" class="headerlink" title="三、怎么卖"></a>三、怎么卖</h2><blockquote><p><strong>俗话说：“会买的是徒弟，会卖的才是师傅。”</strong></p></blockquote><p>如何把握卖出时机的确是基金投资中，最难掌握的一步，但是不用害怕，这个时候我们已经有了收益，需要做的就是落袋为安，把那个数字转换成实实在在的钱罢了。</p><p><strong>下面有几种方法请大家查收，从简单到困难。</strong></p><h3 id="（1）目标收益率法"><a href="#（1）目标收益率法" class="headerlink" title="（1）目标收益率法"></a><strong>（1）目标收益率法</strong></h3><p>在我们入市之前，给自己定下一个目标收益率（15%或者20%），</p><p>当定投的持有收益率达到目标收益率时，卖出20%-30%，然后继续投资。<strong>简单粗暴，适合小白操作。</strong></p><h3 id="（2）估值表法则"><a href="#（2）估值表法则" class="headerlink" title="（2）估值表法则"></a><strong>（2）估值表法则</strong></h3><p>支付宝上对于基金估值的判断会有一个红绿灯来表示：</p><p><img src="https://pic2.zhimg.com/50/v2-b0733a6fbf4ef36ac2ba7a18c4aced75_hd.jpg?source=1940ef5c"></p><p>（图中基金不作投资参考）</p><p><strong>除了指数红绿灯，在支付宝上还可以找到专业机构看法参考：</strong></p><p><img src="https://pic1.zhimg.com/50/v2-9c8f5432a620a2247d8b7d6078e05f23_hd.jpg?source=1940ef5c"></p><p><img src="https://pic1.zhimg.com/80/v2-9c8f5432a620a2247d8b7d6078e05f23_1440w.jpg?source=1940ef5c"></p><p>（图中基金不做投资参考）</p><p>参考基金估值和机构的看法，来决定是否止盈</p><p>但是<strong>止盈并不是全部卖出</strong>，假设后面有一个大牛市，那么全部卖出就吃不到后面的收益，建议每次止盈**酌情卖出20%、30%**等</p><h3 id="（3）市场形势止盈法"><a href="#（3）市场形势止盈法" class="headerlink" title="（3）市场形势止盈法"></a><strong>（3）市场形势止盈法</strong></h3><p><strong>这个是老基民的方法了，要求个人理财者把握好大的方向：</strong></p><p><strong>知道目前市场是牛是熊、市场上的基金是便宜还是贵。如果实在不知道的呢，我建议上证指数2900点以下多买，3300点附近部分卖出。</strong></p><p>更进一阶的可以不只分析大盘，也可以分析自己所投资的行业，分别从政策、技术、资金等方面判断市场所处位置，上涨的可能性大还是跌的可能性大。</p><p><strong>如果现在不会这种方法，不用担心，在市场上度过一年之后，你就会有自己的看法。</strong></p><blockquote><p>本文整理自知乎-<strong>吴机长</strong>的回答</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网上关于基金投资教学的文章有很多，但都太过于专业，太过于繁琐，今天就用简单直白的内容重新认识基金。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;直接告诉你 怎么买、买多少、怎么卖&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开始前先了解下基金的分类&lt;/p&gt;
&lt;h2 id=&quot;基金的分类&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="懂理财" scheme="https://blog.jddfe.com/categories/%E6%87%82%E7%90%86%E8%B4%A2/"/>
    
    
    <category term="基金" scheme="https://blog.jddfe.com/tags/%E5%9F%BA%E9%87%91/"/>
    
    <category term="定投" scheme="https://blog.jddfe.com/tags/%E5%AE%9A%E6%8A%95/"/>
    
    <category term="投资" scheme="https://blog.jddfe.com/tags/%E6%8A%95%E8%B5%84/"/>
    
  </entry>
  
  <entry>
    <title>防抖、节流及应用场景</title>
    <link href="https://blog.jddfe.com/2020/11/11/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/"/>
    <id>https://blog.jddfe.com/2020/11/11/%E9%98%B2%E6%8A%96%E3%80%81%E8%8A%82%E6%B5%81%E5%8F%8A%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</id>
    <published>2020-11-11T14:27:28.000Z</published>
    <updated>2020-11-11T15:09:18.571Z</updated>
    
    <content type="html"><![CDATA[<h2 id="防抖-debounce"><a href="#防抖-debounce" class="headerlink" title="防抖(debounce)"></a>防抖(debounce)</h2><blockquote><p>事件被触发n秒后再执行回调，如果在这n秒内又被触发，则重新计时。</p></blockquote><p>防抖，顾名思义，防止抖动，什么叫抖动，事件被高频触发，想象你在用鼠标点击按钮操纵一个小人让他有跳跃的动作，你狂点鼠标，小人狂跳，这就是最直观的抖动现象。</p><p>直接上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* fn [function] 需要防抖的函数</span></span><br><span class="line"><span class="comment">* delay [number] 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">// 借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 当前正在一个计时过程中，并且又触发了相同事件。所以要取消当前的计时，重新开始计时</span></span><br><span class="line">        <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">          <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">          fn.call(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="节流-throttle"><a href="#节流-throttle" class="headerlink" title="节流(throttle)"></a>节流(throttle)</h2><blockquote><p>规定在一个单位时间内，只能触发一次函数。如果这个单位时间内触发多次函数，只有一次生效。</p></blockquote><p>简单的可以理解为指定时间间隔只执行一次任务。</p><p>直接看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn,delay</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="function"><span class="title">if</span>(<span class="params">valid</span>)</span>&#123;</span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          fn.call(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">          valid = <span class="literal">true</span>;</span><br><span class="line">      &#125;, delay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：节流函数并不止上面这种实现方案,例如可以完全不借助setTimeout，可以把状态位换成时间戳，然后利用时间戳差值是否大于指定间隔时间来做判定。也可以直接将setTimeout的返回的标记当做判断条件-判断当前定时器是否存在，如果存在表示还在冷却，并且在执行fn之后消除定时器表示激活，原理都一样。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>那么你可能会困惑，防抖也有时间间隔，节流还是时间间隔，它俩啥区别？</p><p>上结论：</p><p>防抖：超过指定时间间隔，不论点击多少次都只执行一次。</p><p>节流：指定时间间隔只执行一次，执行频率不受操作频率影响，但会把所有的都执行完。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>防抖：</p><p>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。<br>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用防抖来让其只触发一次</p><p>节流：</p><p>鼠标不断点击触发，mousedown(单位时间内只触发一次)<br>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;防抖-debounce&quot;&gt;&lt;a href=&quot;#防抖-debounce&quot; class=&quot;headerlink&quot; title=&quot;防抖(debounce)&quot;&gt;&lt;/a&gt;防抖(debounce)&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;事件被触发n秒后再执行回调，如果在这n</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="防抖" scheme="https://blog.jddfe.com/tags/%E9%98%B2%E6%8A%96/"/>
    
    <category term="节流" scheme="https://blog.jddfe.com/tags/%E8%8A%82%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 双线部署到 Coding 和 GitHub 并实现全站 HTTPS</title>
    <link href="https://blog.jddfe.com/2020/11/09/Hexo-%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%88%B0-Coding-%E5%92%8C-GitHub-%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%85%A8%E7%AB%99-HTTPS/"/>
    <id>https://blog.jddfe.com/2020/11/09/Hexo-%E5%8F%8C%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%88%B0-Coding-%E5%92%8C-GitHub-%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%85%A8%E7%AB%99-HTTPS/</id>
    <published>2020-11-09T14:56:25.000Z</published>
    <updated>2020-11-10T16:46:03.012Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub pages是GitHub提供的一项静态站点托管网页，这里就不过多介绍，由于国内网络原因，访问延迟100-300ms，当然这还是在网络较好的时候，在网络差的情况下会很难加载完全网页，令人头疼，于是，针对这个问题做个大致的解决方案，记录分享下。</p><p>本文主要从双线部署和实现https自定义域名两个点做分享，并记录一下其中遇到的坑。</p><p>所谓双线部署就是将博客同时发布到 Coding 和 Github，博客发布到 Coding 来提升国内访问速度，并可以提交百度收录，GitHub 禁止了百度的爬取，当然可以通过其他方案来解决收录问题，这里就不过多介绍了，感兴趣的可以网上找一下。</p><h2 id="实现双线部署"><a href="#实现双线部署" class="headerlink" title="实现双线部署"></a>实现双线部署</h2><p>首先，你要将 Hexo 成功部署到了 GitHub Pages，如果还没有，可以参考之前的博文专门的教程<a href="https://blog.jddfe.com/2016/02/28/Hexo%205%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/">《Hexo 5分钟搞定你的个人博客》</a></p><p>在成功部署到了 GitHub 后，那么就简单了，关键点就在于发布配置多配置个 Coding 代码库。</p><p>上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: </span><br><span class="line">    coding: https:&#x2F;&#x2F;e.coding.net&#x2F;团队名&#x2F;项目名&#x2F;代码库.git</span><br><span class="line">    github: https:&#x2F;&#x2F;github.com&#x2F;昵称&#x2F;代码库.git</span><br></pre></td></tr></table></figure><h4 id="创建-Coding-项目"><a href="#创建-Coding-项目" class="headerlink" title="创建 Coding 项目"></a>创建 Coding 项目</h4><p>进入 <a href="https://coding.net/">Coding</a> 官网，点击登录（如果首次使用，需要创建团队-创建用户-完成注册，安装步骤完成）</p><p><img src="2020-11-11T002543.png" alt="2020-11-11T002543"></p><h5 id="进入后创建项目，选择-DevOps-项目-（比较关键，决定后面能否静态部署）"><a href="#进入后创建项目，选择-DevOps-项目-（比较关键，决定后面能否静态部署）" class="headerlink" title="进入后创建项目，选择 DevOps 项目 （比较关键，决定后面能否静态部署）"></a>进入后创建项目，选择 <code>DevOps 项目</code> （比较关键，决定后面能否静态部署）</h5><h5 id="创建完项目后，新建仓库"><a href="#创建完项目后，新建仓库" class="headerlink" title="创建完项目后，新建仓库"></a>创建完项目后，新建仓库</h5><h5 id="重点这里，新建静态网站"><a href="#重点这里，新建静态网站" class="headerlink" title="重点这里，新建静态网站"></a>重点这里，新建静态网站</h5><p><img src="2020-11-11T003205.png" alt="2020-11-11T003205"></p><p>这里有三种方式：</p><ul><li>代码来源-现有仓库，网站类型-静态网站</li><li>代码来源-现有仓库，网站类型-Hexo/Jekyll</li><li>代码来源-示例仓库，网站类型-Hexo/Jekyll</li></ul><p>区别在于是在本地构建编译，还是云构建编译。最终都是把编译后的代码部署到服务。</p><p>好，到此，上面双部署就算完成。</p><h2 id="自定义域名并HTTPS"><a href="#自定义域名并HTTPS" class="headerlink" title="自定义域名并HTTPS"></a>自定义域名并HTTPS</h2><h4 id="Github-自定义域名"><a href="#Github-自定义域名" class="headerlink" title="Github 自定义域名"></a>Github 自定义域名</h4><p>在 Settings -&gt; GitHub Pages 直接配置 Custom domain。这里要注意一定要在 hexo项目source下新建一个 CNAME 文件，内容为你自定义的域名，解决每次发布的时候 Custom domain 会被重置的问题。</p><h4 id="Coding-自定义域名"><a href="#Coding-自定义域名" class="headerlink" title="Coding 自定义域名"></a>Coding 自定义域名</h4><p>静态网站 -&gt; 自定义域名。</p><p><img src="2020-11-11T004326.png" alt="2020-11-11T004326"></p><p>配置同时需要生产SSL证书，并且需要做域名解析的配置。</p><p>至此，我们的 Hexo 博客就成功双线部署到 Coding Pages 和 GitHub Pages 了，并且也实现了全站 HPPTS。完成配置后你会明显发现速度的变化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;GitHub pages是GitHub提供的一项静态站点托管网页，这里就不过多介绍，由于国内网络原因，访问延迟100-300ms，当然这还是在网络较好的时候，在网络差的情况下会很难加载完全网页，令人头疼，于是，针对这个问题做个大致的解决方案，记录分享下。&lt;/p&gt;
&lt;p&gt;本文</summary>
      
    
    
    
    <category term="折腾不止" scheme="https://blog.jddfe.com/categories/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/"/>
    
    
    <category term="Hexo" scheme="https://blog.jddfe.com/tags/Hexo/"/>
    
    <category term="Github Page" scheme="https://blog.jddfe.com/tags/Github-Page/"/>
    
  </entry>
  
  <entry>
    <title>闭包为什么会占用内存</title>
    <link href="https://blog.jddfe.com/2016/09/03/%E9%97%AD%E5%8C%85%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/"/>
    <id>https://blog.jddfe.com/2016/09/03/%E9%97%AD%E5%8C%85%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/</id>
    <published>2016-09-03T14:16:54.000Z</published>
    <updated>2020-11-11T08:57:02.166Z</updated>
    
    <content type="html"><![CDATA[<p>在试图弄清这个问题之前，先要理解<a href="/2016/09/02/%E6%A0%88%E5%86%85%E5%AD%98%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/" title="栈内存堆内存和预处理">栈内存堆内存和预处理</a></p><h2 id="占用内存，不会销毁的闭包实例"><a href="#占用内存，不会销毁的闭包实例" class="headerlink" title="占用内存，不会销毁的闭包实例"></a>占用内存，不会销毁的闭包实例</h2><h3 id="例1："><a href="#例1：" class="headerlink" title="例1："></a>例1：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = fn();</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>例1的图示</p><p><img src="T162925.png" alt="T162925"></p><p><strong>未被占用的堆内存才会被销毁</strong></p><p>所以，正如图中椭圆形关键点中说明的那样，堆内存xxxfff111被返回给了全局变量f，而全局变量只有在窗口关闭的时候才会销毁，<strong>因此堆内存xxxfff111将一直被占用而不会销毁</strong>，定义它的局部作用域A也不会被销毁。</p><h3 id="例2"><a href="#例2" class="headerlink" title="例2"></a>例2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    oDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>这段代码的特点是：私有作用域给dom元素的事件绑定一个方法。</p><p>例2的图示：</p><p><img src="T163019.png" alt="T163019"></p><p>正如图中椭圆形关键点所说，标签对象的属性里面会自带一个onclick的属性，未被赋值时其值为null。那么，在自执行函数执行的时候，其创建的作用域所占用的堆内存xxxfff111同样也会被全局的堆内存xxxfff000占用（这里要注意，是堆内存占用堆内存），所以堆内存xxxfff111和栈内存A都不会被销毁。</p><h2 id="不占用内存，立即销毁的实例"><a href="#不占用内存，立即销毁的实例" class="headerlink" title="不占用内存，立即销毁的实例"></a>不占用内存，立即销毁的实例</h2><p>只需要将例1稍作修改。</p><h3 id="例3："><a href="#例3：" class="headerlink" title="例3："></a>例3：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">    var num &#x3D; 100;</span><br><span class="line">    return function()&#123;</span><br><span class="line">        console.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn();&#x2F;&#x2F;主要修改在这里</span><br></pre></td></tr></table></figure><p>例3的图示</p><p><img src="T163106.png" alt="T163106"></p><p>由于在函数fn中，xxxfff111是被return的，所以栈内存A的预解释不会处理xxxfff111，它只在fn函数执行的时候才会生成，而函数fn的栈内存A每次被执行之后都会被销毁。</p><h2 id="暂时占用内存，延时销毁的闭包实例"><a href="#暂时占用内存，延时销毁的闭包实例" class="headerlink" title="暂时占用内存，延时销毁的闭包实例"></a>暂时占用内存，延时销毁的闭包实例</h2><p>将例3稍作修改，就变成了延时销毁的闭包实例。</p><h3 id="例4："><a href="#例4：" class="headerlink" title="例4："></a>例4：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn()();<span class="comment">//这里到底发生了什么？其实是执行了一次fn之后，把返回的子函数有执行了一次，所以在子函数执行的时候，栈内存fn()是不能销毁的，但是子函数执行完毕后因为没有被占用，所以最终还是要被销毁的，所以最终fn()还是会被销毁的。</span></span><br></pre></td></tr></table></figure><p>例4的图示：</p><p><img src="T163156.png" alt="T163156"></p><p>正如途中椭圆形关键点处所说，<code>fn()()</code>的意思是在执行完<code>fn()</code>之后再把返回的值函数执行一遍。因此在子函数执行的时候，堆内存xxxfff111被占用了，相应的栈内存A也将保留。</p><p>可堆内存xxxfff111中保存的子函数在执行完成之后还是会被销毁，接着堆内存xxxfff111就作为未被占用的堆内存而被销毁，最终栈内存A也会被销毁。</p><p>所以，栈内存在执行完之后会被保留一段时间，这段时间等于其子函数执行的时间。</p><p>参考资料：</p><p>javascript高级程序设计(第三版)。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在试图弄清这个问题之前，先要理解&lt;a href=&quot;/2016/09/02/%E6%A0%88%E5%86%85%E5%AD%98%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/&quot; title=&quot;</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Javascript" scheme="https://blog.jddfe.com/tags/Javascript/"/>
    
    <category term="闭包" scheme="https://blog.jddfe.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>栈内存堆内存和预处理</title>
    <link href="https://blog.jddfe.com/2016/09/02/%E6%A0%88%E5%86%85%E5%AD%98%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://blog.jddfe.com/2016/09/02/%E6%A0%88%E5%86%85%E5%AD%98%E5%A0%86%E5%86%85%E5%AD%98%E5%92%8C%E9%A2%84%E5%A4%84%E7%90%86/</id>
    <published>2016-09-02T14:10:54.000Z</published>
    <updated>2020-11-11T08:51:34.959Z</updated>
    
    <content type="html"><![CDATA[<p>浏览器是如何运行javascript代码的？<a href="https://segmentfault.com/a/1190000020438413">JavaScript 是如何运行的？</a></p><p>看例1：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">12</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line">num = <span class="number">200</span>;</span><br></pre></td></tr></table></figure><p>用图解释这一行代码是如何执行的。</p><p><img src="T161637.png" alt="T161637"></p><p>这是一个简单的图示，现在我们来增加几个概念：栈内存、堆内存和预处理。</p><h2 id="栈内存"><a href="#栈内存" class="headerlink" title="栈内存"></a>栈内存</h2><p>栈内存用来存放基本数据类型(Number、String、Boolean、Null和Undefined)，<strong>在执行完之后销毁。</strong></p><p>栈内存与另一个概念息息相关——作用域，即代码的执行环境。上图中左边的栈内存就是全局作用域，而右边的则是局部作用域。全局作用域在浏览器窗口关闭之后才销毁。局部作用域在执行完之后就会销毁。</p><p>javascript规定，父作用域不能使用子作用域中变量和方程，而反过来是可以的。这个反过来的方向链条则被称为作用域链。</p><p>这里需要注意的是，<strong>判断子作用域的父作用域是哪一个，要看这个子作用域是在哪里定义的，而不是在哪里执行。</strong></p><h2 id="堆内存"><a href="#堆内存" class="headerlink" title="堆内存"></a>堆内存</h2><p>堆内存用来存放引用数据类型(object、array、function、date)，<strong>在没有被引用之后销毁。</strong></p><p>当我们声明和定义了一个引用数据类型之后，这个对象保存在堆内存中，而这个对象的地址则保存在栈内存中以用于引用。</p><p>在全局作用域声明和定义的引用数据类型，销毁的方法是手动赋值null。</p><h2 id="看一组例子来说明栈内存与堆内存的区别："><a href="#看一组例子来说明栈内存与堆内存的区别：" class="headerlink" title="看一组例子来说明栈内存与堆内存的区别："></a>看一组例子来说明栈内存与堆内存的区别：</h2><p>例2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 20;</span><br><span class="line">var b &#x3D; a;</span><br><span class="line">b &#x3D; 30;</span><br><span class="line">&#x2F;&#x2F; a等于多少？</span><br></pre></td></tr></table></figure><p>例3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var m &#x3D; &#123; a: 10, b: 20 &#125;</span><br><span class="line">var n &#x3D; m;</span><br><span class="line">n.a &#x3D; 15;</span><br><span class="line">&#x2F;&#x2F; m.a的值是分别是什么？</span><br></pre></td></tr></table></figure><p>例2的图解</p><p><img src="T161737.png" alt="T161737"></p><p>例3的图解</p><p><img src="T161816.png" alt="T161816"></p><p>由上两个图解可见，当基本数据类型传递的时候，其实是复制了一个新的数据给另一个变量；而当引用类型传递的时候，复制的仅仅是引用数据类型的地址，两个变量通过地址指向的是同一个堆内存中的数据。</p><p>所以在例3中，当我们改变n.a的时候，m.a也同样改变了。</p><h2 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h2><p>预处理是浏览器在执行代码前要做的任务，它包括变量的声明和函数声明与定义。</p><p>预处理是<strong>变量提升</strong>的原因。</p><p>当我们写了<code>var num = 12</code>这样的一行代码的时候，在执行时其实是分为两步：声明<code>var num</code>和定义<code>num = 12</code>。对于变量，预处理只做声明而不做定义。</p><p>而相对于函数<code>function fn()&#123;var num 12&#125;</code>，同样有声明和定义之分，与变量不同的是，预处理时声明和定义全部执行。具体步骤是：声明<code>function fn()</code>，定义<code>fn() = &quot;&#123;var num = 12&#125;&quot;</code>。</p><p>理解了栈内存、堆内存和预处理之后，重新画出例1的图示：</p><p><img src="T161853.png" alt="T161853"></p><p>这里的堆内存xxxfff000被全局作用域的函数fn引用，而全局作用域只有在浏览器窗口关闭的时候才会销毁，所以，只要浏览器窗口没有关闭，则堆内存xxxfff000一直被引用而不会销毁。</p><p>参考资料：</p><p>javascript高级程序设计(第三版)；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;浏览器是如何运行javascript代码的？&lt;a href=&quot;https://segmentfault.com/a/1190000020438413&quot;&gt;JavaScript 是如何运行的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;看例1：&lt;/p&gt;
&lt;figure class=&quot;highlig</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="Javascript" scheme="https://blog.jddfe.com/tags/Javascript/"/>
    
    <category term="栈和堆" scheme="https://blog.jddfe.com/tags/%E6%A0%88%E5%92%8C%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>JS 中的事件绑定、事件监听、事件委托</title>
    <link href="https://blog.jddfe.com/2016/08/18/JS%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E3%80%81%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E3%80%81%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
    <id>https://blog.jddfe.com/2016/08/18/JS%20%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E3%80%81%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E3%80%81%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</id>
    <published>2016-08-18T12:50:14.000Z</published>
    <updated>2020-11-16T16:15:55.791Z</updated>
    
    <content type="html"><![CDATA[<h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><ul><li>要想让 <code>javascript </code>对用户的操作作出响应，首先要对 <code>dom</code> 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称</li></ul><a id="more"></a><ul><li><p>在<code>javascript</code>中，有三种常用的绑定事件的方法</p><ul><li>在<code>dom</code>元素中直接绑定；</li><li>在<code>javascript</code>代码中绑定；</li><li>绑定事件监听函数</li></ul></li></ul><h4 id="在dom中直接绑定事件"><a href="#在dom中直接绑定事件" class="headerlink" title="在dom中直接绑定事件"></a>在<code>dom</code>中直接绑定事件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> onclick=<span class="string">&quot;hello()&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="在javascript代码中绑定事件"><a href="#在javascript代码中绑定事件" class="headerlink" title="在javascript代码中绑定事件"></a>在<code>javascript</code>代码中绑定事件</h4><ul><li>在<code>javascript</code>代码中（即script标签内）绑定事件可以使<code>javascript</code>代码与<code>HTML</code>标签分离，文档结构清晰，便于管理和开发</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="使用事件监听绑定事件"><a href="#使用事件监听绑定事件" class="headerlink" title="使用事件监听绑定事件"></a>使用事件监听绑定事件</h4><ul><li>关于事件监听，W3C规范中定义了3个事件阶段，依次是捕获阶段、目标阶段、冒泡阶段</li><li>起初<code>Netscape</code>制定了<code>javascript</code>的一套事件驱动机制（即事件捕获）。随即<code>IE</code>也推出了自己的一套事件驱动机制（即事件冒泡）。最后<code>W3C</code>规范了两种事件机制，分为捕获阶段、目标阶段、冒泡阶段。IE8以前IE一直坚持自己的事件机制（前端人员一直头痛的兼容性问题），<code>IE9</code>以后<code>IE</code>也支持了W3C规范</li></ul><p><strong>W3C规范</strong></p><ul><li>语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.addEventListener(event, <span class="function"><span class="keyword">function</span>, <span class="title">useCapture</span>)</span></span><br></pre></td></tr></table></figure><ul><li><p><code>event</code> : （必需）事件名，支持所有<code>dom</code>事件。</p></li><li><p><code>function</code>：（必需）指定要事件触发时执行的函数。</p></li><li><p><code>useCapture</code>：（可选）指定事件是否在捕获或冒泡阶段执行。<code>true</code>，捕获。<code>false</code>，冒泡。默认<code>false</code></p></li><li><p>注：<code> IE8</code> 以下不支持</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn1&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>).addEventListener(<span class="string">&quot;click&quot;</span>,hello);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>IE标准</strong></p><ul><li>语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">element.attachEvent(event, <span class="function"><span class="keyword">function</span>)</span></span><br></pre></td></tr></table></figure><ul><li><code>event</code>：（必需）事件类型。需加“on“，例如：<code>onclick</code>。</li><li><code>function</code>：（必需）指定要事件触发时执行的函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&quot;btn2&quot;</span>).attachEvent(<span class="string">&quot;onclick&quot;</span>,hello);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="事件监听的优点"><a href="#事件监听的优点" class="headerlink" title="事件监听的优点"></a>事件监听的优点</h4><ul><li>可以绑定多个事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn3&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line">btn3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 1&quot;</span>); <span class="comment">//不执行</span></span><br><span class="line">&#125;</span><br><span class="line">btn3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 2&quot;</span>); <span class="comment">//执行</span></span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>常规的事件绑定只执行最后绑定的事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn4&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> btn4 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn4&quot;</span>);</span><br><span class="line">btn4.addEventListener(<span class="string">&quot;click&quot;</span>,hello1);</span><br><span class="line">btn4.addEventListener(<span class="string">&quot;click&quot;</span>,hello2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>两个事件都执行了</p><ul><li>可以解除相应的绑定</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn5&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> btn5 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">btn5.addEventListener(<span class="string">&quot;click&quot;</span>,hello1);<span class="comment">//执行了</span></span><br><span class="line">btn5.addEventListener(<span class="string">&quot;click&quot;</span>,hello2);<span class="comment">//不执行</span></span><br><span class="line">btn5.removeEventListener(<span class="string">&quot;click&quot;</span>,hello2);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello 2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>封装事件监听</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn5&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventHandler</span>(<span class="params">target,type,fn</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">target.addEventListener</span>)</span>&#123;</span><br><span class="line">    target.addEventListener(type,fn);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    target.attachEvent(<span class="string">&quot;on&quot;</span>+type,fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除监听事件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEventHandler</span>(<span class="params">target,type,fn</span>)</span>&#123;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">target.removeEventListener</span>)</span>&#123;</span><br><span class="line">    target.removeEventListener(type,fn);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    target.detachEvent(<span class="string">&quot;on&quot;</span>+type,fn);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试</span></span><br><span class="line"><span class="keyword">var</span> btn5 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn5&quot;</span>);</span><br><span class="line">addEventHandler(btn5,<span class="string">&quot;click&quot;</span>,hello1);<span class="comment">//添加事件hello1</span></span><br><span class="line">addEventHandler(btn5,<span class="string">&quot;click&quot;</span>,hello2);<span class="comment">//添加事件hello2</span></span><br><span class="line">removeEventHandler(btn5,<span class="string">&quot;click&quot;</span>,hello1);<span class="comment">//移除事件hello1</span></span><br></pre></td></tr></table></figure><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><ul><li>事件委托就是利用冒泡的原理，把事件加到父元素或祖先元素上，触发执行效果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;click me&quot;</span> id=<span class="string">&quot;btn6&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn6 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn6&quot;</span>);</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  event = event || <span class="built_in">window</span>.event;</span><br><span class="line">  <span class="keyword">var</span> target = event.target || event.srcElement;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">target == btn6</span>)</span>&#123;</span><br><span class="line">    alert(btn5.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="事件委托优点"><a href="#事件委托优点" class="headerlink" title="事件委托优点"></a>事件委托优点</h5><ul><li>提高javascript性能。事件委托可以显著的提高事件的处理速度，减少内存的占用</li><li>传统写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item1&quot;</span> &gt;item1&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item2&quot;</span> &gt;item2&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item3&quot;</span> &gt;item3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> item1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> item2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> item3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item3&quot;</span>);</span><br><span class="line"></span><br><span class="line">item1.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello item1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">item2.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello item2&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">item3.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;hello item3&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>事件委托</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item1&quot;</span> &gt;item1&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item2&quot;</span> &gt;item2&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item3&quot;</span> &gt;item3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> item1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> item2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> item3 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;item3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = event.target;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">target == item1</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello item1&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">target == item2</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello item2&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="function"><span class="title">if</span>(<span class="params">target == item3</span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;hello item3&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>动态的添加dom元素，不需要因为元素的改动而修改事件绑定</li><li>传统写法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item1&quot;</span> &gt;item1&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item2&quot;</span> &gt;item2&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item3&quot;</span> &gt;item3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = list.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i=<span class="number">0</span>;i&lt;item.length;i++</span>)</span>&#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">    item[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      alert(item[i].innerHTML);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> textnode=<span class="built_in">document</span>.createTextnode(<span class="string">&quot;item4&quot;</span>);</span><br><span class="line">node.appendChild(textnode);</span><br><span class="line">list.appendChild(node);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>点击item1到item3都有事件响应，但是点击item4时，没有事件响应。说明传统的事件绑定无法对动态添加的元素而动态的添加事件。</li><li>事件委托</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item1&quot;</span> &gt;item1&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item2&quot;</span> &gt;item2&lt;/li&gt;</span><br><span class="line">  &lt;li id=<span class="string">&quot;item3&quot;</span> &gt;item3&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">&quot;click&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = event.target;</span><br><span class="line">  <span class="function"><span class="title">if</span>(<span class="params">target.nodeName == <span class="string">&quot;LI&quot;</span></span>)</span>&#123;</span><br><span class="line">    alert(target.innerHTML);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node=<span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> textnode=<span class="built_in">document</span>.createTextnode(<span class="string">&quot;item4&quot;</span>);</span><br><span class="line">node.appendChild(textnode);</span><br><span class="line">list.appendChild(node);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>当点击item4时，item4有事件响应。说明事件委托可以为新添加的dom元素动态的添加事件</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;事件绑定&quot;&gt;&lt;a href=&quot;#事件绑定&quot; class=&quot;headerlink&quot; title=&quot;事件绑定&quot;&gt;&lt;/a&gt;事件绑定&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;要想让 &lt;code&gt;javascript &lt;/code&gt;对用户的操作作出响应，首先要对 &lt;code&gt;dom&lt;/code&gt; 元素绑定事件处理函数。所谓事件处理函数，就是处理用户操作的函数，不同的操作对应不同的名称&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://blog.jddfe.com/tags/javascript/"/>
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="事件" scheme="https://blog.jddfe.com/tags/%E4%BA%8B%E4%BB%B6/"/>
    
    <category term="event" scheme="https://blog.jddfe.com/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>OOP之原型与原型链</title>
    <link href="https://blog.jddfe.com/2016/08/17/OOP%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>https://blog.jddfe.com/2016/08/17/OOP%E4%B9%8B%E5%8E%9F%E5%9E%8B%E4%B8%8E%E5%8E%9F%E5%9E%8B%E9%93%BE/</id>
    <published>2016-08-17T12:40:20.000Z</published>
    <updated>2020-11-11T07:59:25.557Z</updated>
    
    <content type="html"><![CDATA[<h4 id="prototype原型对象"><a href="#prototype原型对象" class="headerlink" title="prototype原型对象"></a>prototype原型对象</h4><hr><ul><li>每个函数都有一个默认的<code>prototype</code>属性，其实际上还是一个对象，如果被用在继承中，姑且叫做原型对象</li><li>在构造函数中的<code>prototype</code>中定义的属性和方法，会被创建的对象所继承下来。举个栗子：<a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;F is working..&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">f.work(); <span class="comment">// F is working..</span></span><br></pre></td></tr></table></figure></li><li>当你创建函数时，<code>JS</code>会为这个函数自动添加 <code>prototype</code> 属性，值是空对象。而一旦你把这个函数当作构造函数（ <code>constructor</code> ）调用（即通过 <code>new </code>关键字调用），那么<code>JS</code>就会帮你创建该构造函数的实例，实例继承构造函数 <code>prototype</code> 的所有属性和方法（实例通过设置自己的<code> __proto__</code> 指向构造函数的 <code>prototype</code> 来实现这种继承）</li></ul><h4 id="神秘的proto"><a href="#神秘的proto" class="headerlink" title="神秘的proto"></a>神秘的<strong>proto</strong></h4><hr><ul><li><code>JS</code>的对象中都包含了一个<code>__proto__</code>属性，其指向的是创建该对象时的构造函数的原型对象<code>prototype</code></li></ul><p><img src="T155728.png" alt="T155728"></p><ul><li>从上面的输出结果看出，<code>f.__proto__</code>指向了其构造函数<code>F</code>的<code>prototype</code>，而<code>F.prototype</code>本身也是一个对象，其内部也有<code>__proto__</code>属性，其指向的是<code>Object.prototype</code>,直到最后<code>Object.prototype</code>指向<code>null</code>，这条原型链才结束</li><li>因此，<code>__proto__</code>这个神秘的属性才是原型链形成的真正原因</li></ul><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><hr><ul><li>由于原型对象本身也是对象，根据上边的定义，它也有自己的原型，而它自己的原型对象又可以有自己的原型，这样就组成了一条链，这个就是原型链，<code>JavaScritp</code>引擎在访问对象的属性时，如果在对象本身中没有找到，则会去原型链中查找，如果找到，直接返回值，如果整个链都遍历且没有找到属性，则返回<code>undefined</code>。原型链一般实现为一个链表，这样就可以按照一定的顺序来查找</li></ul><p><img src="T155751.png" alt="T155751"></p><ul><li><p>从上图看出：</p><ul><li><code>Object.prototype</code>是顶级对象，所有对象都继承自它。</li><li><code>Function </code>继承 <code>Function </code>本身， <code>Function.prototype</code> 继承 <code>Object.prototype </code></li><li><code>Function.prototype</code> 和 <code>Function.__proto__</code> 都指向 <code>Function.prototype</code></li><li><code>Object.prototype.__proto__ === null</code> ，说明原型链到 <code>Object.prototype</code>终止</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;prototype原型对象&quot;&gt;&lt;a href=&quot;#prototype原型对象&quot; class=&quot;headerlink&quot; title=&quot;prototype原型对象&quot;&gt;&lt;/a&gt;prototype原型对象&lt;/h4&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;每个函数都有一个默认的&lt;code&gt;prototype&lt;/code&gt;属性，其实际上还是一个对象，如果被用在继承中，姑且叫做原型对象&lt;/li&gt;
&lt;li&gt;在构造函数中的&lt;code&gt;prototype&lt;/code&gt;中定义的属性和方法，会被创建的对象所继承下来。举个栗子：</summary>
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://blog.jddfe.com/tags/javascript/"/>
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    <category term="原型链" scheme="https://blog.jddfe.com/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>OOP之面向对象</title>
    <link href="https://blog.jddfe.com/2016/08/16/OOP%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blog.jddfe.com/2016/08/16/OOP%E4%B9%8B%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2016-08-16T12:26:24.000Z</published>
    <updated>2020-11-11T07:49:46.148Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一般面向对象包含：继承，封装，多态，抽象</p></blockquote><h4 id="对象形式的继承"><a href="#对象形式的继承" class="headerlink" title="对象形式的继承"></a>对象形式的继承</h4><hr><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><hr><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = &#123;</span><br><span class="line">    name: <span class="string">&#x27;allin&#x27;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    address: &#123;</span><br><span class="line">        home: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        office: <span class="string">&#x27;office&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    sclools: [<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;z&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> programer = &#123;</span><br><span class="line">    language: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">p, c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> prop <span class="keyword">in</span> p</span>)</span>&#123;</span><br><span class="line">        c[prop] = p[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">extend(Person, programer);</span><br><span class="line">programer.name;  <span class="comment">// allin</span></span><br><span class="line">programer.address.home;  <span class="comment">// home</span></span><br><span class="line">programer.address.home = <span class="string">&#x27;house&#x27;</span>;  <span class="comment">//house</span></span><br><span class="line">Person.address.home;  <span class="comment">// house</span></span><br></pre></td></tr></table></figure><ul><li>从上面的结果看出，浅拷贝的缺陷在于修改了子对象中引用类型的值，会影响到父对象中的值，因为在浅拷贝中对引用类型的拷贝只是拷贝了地址，指向了内存中同一个副本</li></ul><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extendDeeply</span>(<span class="params">p, c</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = c || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> p)&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> p[prop] === <span class="string">&quot;object&quot;</span></span>)</span>&#123;</span><br><span class="line">            c[prop] = (p[prop].constructor === <span class="built_in">Array</span>)?[]:&#123;&#125;;</span><br><span class="line">            extendDeeply(p[prop], c[prop]);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            c[prop] = p[prop];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>利用递归进行深拷贝，这样子对象的修改就不会影响到父对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extendDeeply(Person, programer);</span><br><span class="line">programer.address.home = <span class="string">&#x27;allin&#x27;</span>;</span><br><span class="line">Person.address.home; <span class="comment">// home</span></span><br></pre></td></tr></table></figure><h5 id="利用call和apply继承"><a href="#利用call和apply继承" class="headerlink" title="利用call和apply继承"></a>利用call和apply继承</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.address = &#123;<span class="attr">home</span>: <span class="string">&quot;home&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.language = <span class="string">&quot;js&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ES5中的Object-create"><a href="#ES5中的Object-create" class="headerlink" title="ES5中的Object.create()"></a>ES5中的Object.create()</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">name</span> : <span class="string">&#x27;allin&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(o);</span><br><span class="line">obj.name; <span class="comment">// allin</span></span><br></pre></td></tr></table></figure><ul><li><code>Object.create()</code>作为<code>new</code>操作符的替代方案是<code>ES5</code>之后才出来的。我们也可以自己模拟该方法：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟Object.create()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myCreate</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    o = <span class="keyword">new</span> F();</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = &#123; <span class="attr">name</span> : <span class="string">&#x27;allin&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = myCreate(o);</span><br><span class="line">obj.name; <span class="comment">// allin</span></span><br></pre></td></tr></table></figure><ul><li>目前，各大浏览器的最新版本（包括<code>IE9</code>）都部署了这个方法。如果遇到老式浏览器，可以用下面的代码自行部署</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">　<span class="keyword">if</span> (!<span class="built_in">Object</span>.create) &#123;</span><br><span class="line">　　　　<span class="built_in">Object</span>.create = <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</span><br><span class="line">　　　　　　 <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">　　　　　　F.prototype = o;</span><br><span class="line">　　　　　　<span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><h4 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h4><hr><h5 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;&#125;</span><br><span class="line">Person.prototype.headCount = <span class="number">1</span>;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;eating...&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params">name, age, title</span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Programmer.prototype = <span class="built_in">Object</span>.create(Person.prototype); <span class="comment">//建立继承关系</span></span><br><span class="line">Programmer.prototype.constructor = Programmer;  <span class="comment">// 修改constructor的指向</span></span><br></pre></td></tr></table></figure><h5 id="调用父类方法"><a href="#调用父类方法" class="headerlink" title="调用父类方法"></a>调用父类方法</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.headCount = <span class="number">1</span>;</span><br><span class="line">Person.prototype.eat = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;eating...&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Programmer</span>(<span class="params">name, age, title</span>)</span>&#123;</span><br><span class="line">    Person.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用父类的构造器</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Programmer.prototype = <span class="built_in">Object</span>.create(Person.prototype);</span><br><span class="line">Programmer.prototype.constructor = Programmer;</span><br><span class="line"></span><br><span class="line">Programmer.prototype.language = <span class="string">&quot;js&quot;</span>;</span><br><span class="line">Programmer.prototype.work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;i am working code in &#x27;</span>+ <span class="built_in">this</span>.language);</span><br><span class="line">    Person.prototype.eat.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>); <span class="comment">// 调用父类上的方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><hr><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><hr><ul><li><code>js</code>是没有命名空间的，因此可以用对象模拟</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;&#125;;  <span class="comment">// 命名空间app</span></span><br><span class="line"><span class="comment">//模块1</span></span><br><span class="line">app.module1 = &#123;</span><br><span class="line">    name: <span class="string">&#x27;allin&#x27;</span>,</span><br><span class="line">    f: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;hi robot&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">app.module1.name; <span class="comment">// &quot;allin&quot;</span></span><br><span class="line">app.module1.f();  <span class="comment">// hi robot</span></span><br></pre></td></tr></table></figure><h5 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//静态成员</span></span><br><span class="line">Person.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;static&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Person.walk();  <span class="comment">// static</span></span><br></pre></td></tr></table></figure><h5 id="私有与公有"><a href="#私有与公有" class="headerlink" title="私有与公有"></a>私有与公有</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 私有属性与方法</span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;allin&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> work = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//公有属性与方法</span></span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;say hello&#x27;</span>);</span><br><span class="line">        work.call(<span class="built_in">this</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="number">123</span>);</span><br><span class="line">p1.name; <span class="comment">// undefined</span></span><br><span class="line">p1.id;  <span class="comment">// 123</span></span><br><span class="line">p1.say();  <span class="comment">// say hello 123</span></span><br></pre></td></tr></table></figure><h5 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> moduleA;</span><br><span class="line">moduleA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prop = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        func: func,</span><br><span class="line">        prop: prop</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;(); <span class="comment">// 立即执行匿名函数</span></span><br></pre></td></tr></table></figure><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><hr><h5 id="模拟方法重载"><a href="#模拟方法重载" class="headerlink" title="模拟方法重载"></a>模拟方法重载</h5><hr><ul><li><code>arguments</code>属性可以取得函数调用的实参个数，可以利用这一点模拟方法的重载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params">a, b </span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(demo.length); <span class="comment">// 得到形参个数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length); <span class="comment">//得到实参个数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);  <span class="comment">// 第一个实参 4</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]);  <span class="comment">// 第二个实参 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">demo(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现可变长度实参的相加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="title">for</span>(<span class="params"> <span class="keyword">var</span> i = <span class="built_in">arguments</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--</span>)</span>&#123;</span><br><span class="line">        total += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>));  <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));  <span class="comment">// 7</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数不同的情况</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fontSize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="built_in">arguments</span>.length == <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ele.style.fontSize;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ele.style.fontSize = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">fontSize(<span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fontSize());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型不同的情况</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setting</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;js&#x27;</span>);</span><br><span class="line">    <span class="function"><span class="title">if</span>(<span class="params"><span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="string">&quot;object&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> p <span class="keyword">in</span> <span class="built_in">arguments</span>[<span class="number">0</span>]</span>)</span>&#123;</span><br><span class="line">            ele.style[p] = <span class="built_in">arguments</span>[<span class="number">0</span>][p];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        ele.style.fontSize = <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">        ele.style.backgroundColor = <span class="built_in">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">setting(<span class="number">18</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">setting(&#123;<span class="attr">fontSize</span>:<span class="number">20</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;green&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><h5 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h5><hr><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> F();</span><br><span class="line">F.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;F&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">f.run(); <span class="comment">// F</span></span><br><span class="line"></span><br><span class="line">f.run = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fff&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">f.run();  <span class="comment">// fff</span></span><br></pre></td></tr></table></figure><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><hr><ul><li>在构造器中 <code>throw new Error(&#39;&#39;)</code>; 抛异常。这样防止这个类被直接调用</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">DetectorBase</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Abstract class can not be invoked directly!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DetectorBase.prototype.detect = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Detection starting...&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">DetectorBase.prototype.stop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Detection stopped.&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">DetectorBase.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// var d = new DetectorBase();</span></span><br><span class="line"><span class="comment">// Uncaught Error: Abstract class can not be invoked directly!</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkDetector</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">LinkDetector.prototype = <span class="built_in">Object</span>.create(DetectorBase.prototype);</span><br><span class="line">LinkDetector.prototype.constructor = LinkDetector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> l = <span class="keyword">new</span> LinkDetector();</span><br><span class="line"><span class="built_in">console</span>.log(l); <span class="comment">//LinkDetector &#123;&#125;__proto__: LinkDetector</span></span><br><span class="line">l.detect(); <span class="comment">//Detection starting...</span></span><br><span class="line">l.init(); <span class="comment">//Uncaught Error: Error</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;一般面向对象包含：继承，封装，多态，抽象&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;对象形式的继承&quot;&gt;&lt;a href=&quot;#对象形式的继承&quot; class=&quot;headerlink&quot; title=&quot;对象形式的继承&quot;&gt;&lt;/a&gt;对象形式的继承&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;浅拷贝&quot;&gt;&lt;a href=&quot;#浅拷贝&quot; class=&quot;headerlink&quot; title=&quot;浅拷贝&quot;&gt;&lt;/a&gt;浅拷贝&lt;/h5&gt;&lt;hr&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://blog.jddfe.com/tags/javascript/"/>
    
    <category term="面向对象" scheme="https://blog.jddfe.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>OOP之类与对象</title>
    <link href="https://blog.jddfe.com/2016/08/15/OOP%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <id>https://blog.jddfe.com/2016/08/15/OOP%E4%B9%8B%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</id>
    <published>2016-08-15T12:55:24.000Z</published>
    <updated>2020-11-11T07:46:49.484Z</updated>
    
    <content type="html"><![CDATA[<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><hr><h5 id="对象的含义"><a href="#对象的含义" class="headerlink" title="对象的含义"></a>对象的含义</h5><ul><li><p>所谓对象，就是一种无序的数据集合，由若干个“键值对”（<code>key-value</code>）构成</p><a id="more"></a><h5 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h5></li><li><p>使用<code>new</code>运算符创建<code>Object</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">p.name = <span class="string">&quot;Tony&quot;</span>;    </span><br></pre></td></tr></table></figure><ul><li>使用对象字面量的形式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象字面量形式</span></span><br><span class="line"><span class="keyword">var</span> p =&#123;</span><br><span class="line">    name: <span class="string">&quot;tony&quot;</span>,</span><br><span class="line">    work: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;working....&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    _age: <span class="number">18</span>,</span><br><span class="line">    <span class="keyword">get</span> <span class="title">age</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>._age;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span> <span class="title">age</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="function"><span class="title">if</span>(<span class="params"> val &lt;<span class="number">0</span> || val &gt; <span class="number">150</span></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;invalid value&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>._age = val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(p.name);</span><br></pre></td></tr></table></figure><h5 id="对象的基本操作"><a href="#对象的基本操作" class="headerlink" title="对象的基本操作"></a>对象的基本操作</h5><ul><li>成员属性的添加</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.defineProperty()方法</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(p, <span class="string">&quot;age&quot;</span>,&#123;<span class="attr">value</span>: <span class="number">18</span>, <span class="attr">writable</span>: <span class="literal">false</span>&#125;);</span><br><span class="line"><span class="comment">//Object.defineProperties()方法 添加多个属性</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(p, &#123;</span><br><span class="line">    salary:&#123;</span><br><span class="line">        value: <span class="number">1000</span>,</span><br><span class="line">        writable: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    gender:&#123;</span><br><span class="line">        value: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>成员的遍历</p><ul><li>使用 <code>for..in</code>语句</li><li><code>Object.keys()</code>方法 返回一个包含对象键名的字符串数组</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o =&#123;&#125;;</span><br><span class="line">o.name = <span class="string">&quot;jack&quot;</span>;</span><br><span class="line">o.age = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> i <span class="keyword">in</span> o</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o[i]);</span><br><span class="line">&#125; <span class="comment">// jack, 20</span></span><br><span class="line"><span class="built_in">Object</span>.keys(o); <span class="comment">// [&quot;name&quot;, &quot;age&quot;]</span></span><br></pre></td></tr></table></figure><ul><li><p>检查对象是否有某个属性</p><ul><li><code>in</code> 操作符</li><li><code>Object.hasOwnProperty()</code>方法</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">name</span>: <span class="string">&quot;mariya&quot;</span>&#125;</span><br><span class="line"><span class="string">&quot;name&quot;</span> <span class="keyword">in</span> o; <span class="comment">// true</span></span><br><span class="line">o.hasOwnProperty(<span class="string">&quot;name&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>得到对象的属性特性描述 <code>Object.getOwnPropertyDescriptor(obj,property)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getOwnPropertyDescriptor(o, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//Object &#123;</span></span><br><span class="line"><span class="comment">//    value: &quot;mariya&quot;, writable: true, enumerable: true, configurable: true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删除属性<ul><li><code>delete</code>运算符,但有些对象的属性是删除不了的</li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> o.name; <span class="comment">//true</span></span><br><span class="line">o.name;  <span class="comment">// undefined </span></span><br></pre></td></tr></table></figure><h5 id="Constructor属性"><a href="#Constructor属性" class="headerlink" title="Constructor属性"></a>Constructor属性</h5><ul><li><code>constructor</code>始终指向创建当前对象的构造函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Foo.constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 由构造函数实例化一个obj对象</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor === Foo); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor.constructor === <span class="built_in">Function</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>每个函数都有一个默认的属性<code>prototype</code>，而这个<code>prototype</code>的<code>constructor</code>默认指向这个函数</li></ul><h4 id="类的创建"><a href="#类的创建" class="headerlink" title="类的创建"></a>类的创建</h4><hr><ul><li><p>虽然<code>js</code>是门基于对象的语言，但是没有类这一概念的，虽然保留了<code>class</code>的关键字，但在<code>ES6</code>之前是无法使用的。所以，可以用构造函数模拟类的创建，也就是伪类。</p></li><li><p>所谓”构造函数”，其实就是一个普通函数，但是内部使用了<code>this</code>变量。对构造函数使用<code>new</code>运算符，就能生成实例，并且<code>this</code>变量会绑定在实例对象上</p></li><li><p>每一个构造函数都有一个<code>prototype</code>属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">age, name</span>)</span>&#123; <span class="comment">//Class</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将公共的属性或方法放在prototype属性上</span></span><br><span class="line">Person.prototype.headCount = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//创建实例对象</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="number">19</span>, <span class="string">&#x27;johnsom&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="number">20</span>, <span class="string">&#x27;allen&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><hr><ul><li><code>this</code>表示当前对象，如果在全局作用范围内使用<code>this</code>，则指代当前页面对象<code>window</code>； 如果在函数中使用<code>this</code>，则<code>this</code>指代什么是根据运行时此函数在什么对象上被调用。 我们还可以使用<code>apply</code>和<code>call</code>两个全局方法来改变函数中<code>this</code>的具体指向</li></ul><h5 id="全局代码中的this"><a href="#全局代码中的this" class="headerlink" title="全局代码中的this"></a>全局代码中的this</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">//true 全局范围内使用this指向window对象</span></span><br></pre></td></tr></table></figure><h5 id="普通的函数调用"><a href="#普通的函数调用" class="headerlink" title="普通的函数调用"></a>普通的函数调用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;tony&quot;</span>; <span class="comment">// this在运行时指向window对象,在严格模式下则是undefined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在对象中使用"><a href="#在对象中使用" class="headerlink" title="在对象中使用"></a>在对象中使用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">&quot;tony&quot;</span>,</span><br><span class="line">    print: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);  <span class="comment">//this指向对象o，但是可以改变其指向</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="作为构造函数"><a href="#作为构造函数" class="headerlink" title="作为构造函数"></a>作为构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> F(); <span class="comment">// 函数内部的this指向新创建的对象。</span></span><br></pre></td></tr></table></figure><h5 id="多层嵌套的内部函数"><a href="#多层嵌套的内部函数" class="headerlink" title="多层嵌套的内部函数"></a>多层嵌套的内部函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">&quot;person&quot;</span>,</span><br><span class="line">    hello : <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sayhello = <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&quot; says &quot;</span> + sth);</span><br><span class="line">        &#125;;</span><br><span class="line">        sayhello(sth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.hello(<span class="string">&quot;hello world&quot;</span>);<span class="comment">//global says hello world</span></span><br></pre></td></tr></table></figure><ul><li>在内部函数中，<code>this</code>没有按预想的绑定到外层函数对象上，而是绑定到了全局对象。这里普遍被认为是<code>javascript</code>语言的设计错误，因为没有人想让内部函数中的<code>this</code>指向全局对象。一般的处理方式是将<code>this</code>作为变量保存下来，一般约定为<code>that</code>或者<code>self</code>：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;global&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">&quot;person&quot;</span>,</span><br><span class="line">    hello : <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">var</span> sayhello = <span class="function"><span class="keyword">function</span>(<span class="params">sth</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(that.name + <span class="string">&quot; says &quot;</span> + sth);</span><br><span class="line">        &#125;;</span><br><span class="line">        sayhello(sth);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.hello(<span class="string">&quot;hello world&quot;</span>);<span class="comment">//person says hello world</span></span><br></pre></td></tr></table></figure><h5 id="事件中的this"><a href="#事件中的this" class="headerlink" title="事件中的this"></a>事件中的this</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ele = <span class="built_in">document</span>.getElementById(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">ele.addEventListener(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);  <span class="comment">//this指向dom元素</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="使用apply和call改变this的指向"><a href="#使用apply和call改变this的指向" class="headerlink" title="使用apply和call改变this的指向"></a>使用apply和call改变this的指向</h5><ul><li><code>apply</code>和<code>call</code>类似，只是后面的参数是通过一个数组传入，而不是分开传入。两者都是将某个函数绑定到某个具体对象上使用，自然此时的<code>this</code>会被显式的设置为第一个参数。两者的方法定义：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">call( thisArg [，arg1，arg2，… ] );  <span class="comment">// 参数列表，arg1，arg2，...</span></span><br><span class="line">apply(thisArg [，argArray] );     <span class="comment">// 参数数组，argArray</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">    name: <span class="string">&#x27;job&#x27;</span>,</span><br><span class="line">    getName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">o.getName(); <span class="comment">// job</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用call或apply改变函数中this的指向</span></span><br><span class="line">o.getName.call(<span class="built_in">this</span>); <span class="comment">// global</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>简单的总结：</strong></p><ul><li>当函数作为对象的方法调用时，<code>this</code>指向该对象。</li><li>构造函数中的<code>this</code>指向新创建的对象</li><li>嵌套函数中的<code>this</code>不会继承上层函数的<code>this</code>，如果需要，可以用一个变量保存上层函数的<code>this</code></li></ul></li></ul><h5 id="bind（）"><a href="#bind（）" class="headerlink" title="bind（）"></a>bind（）</h5><ul><li>该方法创建一个新函数，称为绑定函数，绑定函数会以创建它时传入<code>bind</code>方法的第一个参数作为<code>this</code>，传入<code>bind</code>方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#ele&quot;</span>).click(person.hello.bind(person));</span><br><span class="line"><span class="comment">//相应元素被点击时，输出person says hello world</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;对象&quot;&gt;&lt;a href=&quot;#对象&quot; class=&quot;headerlink&quot; title=&quot;对象&quot;&gt;&lt;/a&gt;对象&lt;/h4&gt;&lt;hr&gt;
&lt;h5 id=&quot;对象的含义&quot;&gt;&lt;a href=&quot;#对象的含义&quot; class=&quot;headerlink&quot; title=&quot;对象的含义&quot;&gt;&lt;/a&gt;对象的含义&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所谓对象，就是一种无序的数据集合，由若干个“键值对”（&lt;code&gt;key-value&lt;/code&gt;）构成&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="javascript" scheme="https://blog.jddfe.com/tags/javascript/"/>
    
    <category term="面向对象" scheme="https://blog.jddfe.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
    <category term="学习笔记" scheme="https://blog.jddfe.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>移动端自适应适配实现方案</title>
    <link href="https://blog.jddfe.com/2016/06/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E9%80%82%E9%85%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.jddfe.com/2016/06/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%87%AA%E9%80%82%E5%BA%94%E9%80%82%E9%85%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</id>
    <published>2016-06-16T07:21:47.000Z</published>
    <updated>2020-11-11T07:37:04.218Z</updated>
    
    <content type="html"><![CDATA[<p>最近招聘面试过程中，我经常会问到这个移动端自适应适配是怎么实现的，大部分候选人都能说初rem的方式，但是很少有能说出原理的。</p><h4 id="rem-实现弹性布局原理"><a href="#rem-实现弹性布局原理" class="headerlink" title="rem 实现弹性布局原理"></a>rem 实现弹性布局原理</h4><p>根据屏幕宽度动态改变 html 根字体的大小。</p><p><strong>（1）rem + js 实现弹性布局</strong>   </p><p>rem 和 em 两者都是 css 的相对单位，但是两者有明显的区别：<br>当作为font-size单位时，em 表示相对于父元素字体的大小；当作为其他单位时，表示自身字体大小，比如首行缩紧2个字符 text-indent:2em; 。<br>当作为非根元素的时，rem 是相对于根字体的大小；当作为根元素时，相对于初始字体大小的。<br>💡em 容易造成“牵一发而动全身”，可以用作于行高、首行缩紧等；rem 最大的特点是统一参考系，其实现弹性布局的本质是等比缩放（通常是基于宽度）。</p><p><strong>（2）更高级的单位 vw 实现弹性布局</strong>  </p><p>如果把屏幕宽度分为 100 份，每一份就是宽度的 1% ，如果以这一份为单位 就可以实现弹性布局了。利用 rem 相对于根字体这个特性，可以间接地实现这样的单位。 根字体的大小通常是通过 js 获取屏幕宽度设置的。但是 CSS3 引入了一个新的单位 vw ，vw —— 视口宽度的 1/100，其实正是上面我们想办法实现的那个每一份的单位。 vw 允许不通过 js 也能实现根据屏幕宽度的弹性布局。</p><p><strong>（3）vw + rem实现弹性布局</strong>  </p><p>我们完全可以通过 vw 实现弹性布局，当然 vw 结合 rem 同样可以实现弹性布局。   </p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>移动端设备的屏幕大小差别很大，为了避免因为屏幕过宽或过窄造成字体过大或过小，需要结合媒体查询 根据不同屏幕的宽度，设定相对单位的大小。这个时候就需要利用 rem 实现了。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当屏幕宽度小于 320px 的时候，规定字体大小 64px 。</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">320px</span>) &#123;  </span><br><span class="line">  <span class="selector-tag">font-size</span>: 64<span class="selector-tag">px</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//当屏幕宽度大于 540px 的时候，规定字体大小 108px 。</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">540px</span>) &#123;  </span><br><span class="line">  <span class="selector-tag">font-size</span>: 108<span class="selector-tag">px</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>💡响应式布局是不同设备、屏幕展示的样式不同。弹性布局则是等比缩放，高度还原。弹性布局属于响应式布局的一种。使用 rem 实现弹性布局不允许用户设置字体大小，所以 rem 通常适用于图标类活动页，而不是适用于纯文本的页面。</p><h4 id="css-预处理器语言-scss"><a href="#css-预处理器语言-scss" class="headerlink" title="css 预处理器语言 scss"></a>css 预处理器语言 scss</h4><p>scss 是 css 预处理器语言，语法规则和 css 类似。比如，变量使用 $ 符表示，如 $m_fontsize:75 。可以定义函数等。<br>具体规则可查看<a href="https://www.sass.hk/docs/">sass官方文档</a>。</p><h4 id="rem-vw-媒体查询方式实现弹性布局的完整代码实例"><a href="#rem-vw-媒体查询方式实现弹性布局的完整代码实例" class="headerlink" title="rem + vw + 媒体查询方式实现弹性布局的完整代码实例"></a>rem + vw + 媒体查询方式实现弹性布局的完整代码实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通常设计稿以 iphone6 为模型来设计的。因为 iphone6 屏幕宽度是 750px ，所以 iphone6 的屏宽尺寸设置根元素大小基准值 75px ，这里 75px 只是用来计算的，完全可以设置成其他的值</span><br><span class="line">$m_fontsize: 75;   </span><br><span class="line">@function rem($px) &#123;  </span><br><span class="line">  @return ($px &#x2F; $m_fontsize) * 1rem;  </span><br><span class="line">&#125;  </span><br><span class="line">$m_design: 750;  </span><br><span class="line">html &#123;  </span><br><span class="line">  font-size: ($m_fontsize &#x2F; ($m_design &#x2F; 2)) * 100vw;   </span><br><span class="line">  &#x2F;&#x2F; 通过媒体查询限制屏幕过宽过窄造成的页面内容过大和过小的问题</span><br><span class="line">  @media screen and (max-width: 320px) &#123;  </span><br><span class="line">    font-size: 64px;  </span><br><span class="line">  &#125;  </span><br><span class="line">  @media screen and (min-width: 540px) &#123;  </span><br><span class="line">    font-size: 110px;  </span><br><span class="line">  &#125;  </span><br><span class="line">&gt;&#125;  </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近招聘面试过程中，我经常会问到这个移动端自适应适配是怎么实现的，大部分候选人都能说初rem的方式，但是很少有能说出原理的。&lt;/p&gt;
&lt;h4 id=&quot;rem-实现弹性布局原理&quot;&gt;&lt;a href=&quot;#rem-实现弹性布局原理&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="rem" scheme="https://blog.jddfe.com/tags/rem/"/>
    
    <category term="css" scheme="https://blog.jddfe.com/tags/css/"/>
    
    <category term="适配" scheme="https://blog.jddfe.com/tags/%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>ES6从入门到精通之常量与变量(一)</title>
    <link href="https://blog.jddfe.com/2016/04/03/ES6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E4%B9%8B%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F(%E4%B8%80)/"/>
    <id>https://blog.jddfe.com/2016/04/03/ES6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A%E4%B9%8B%E5%B8%B8%E9%87%8F%E4%B8%8E%E5%8F%98%E9%87%8F(%E4%B8%80)/</id>
    <published>2016-04-03T12:30:22.000Z</published>
    <updated>2020-11-10T14:25:50.053Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。</p><p>Mozilla公司将在这个标准的基础上，推出JavaScript 2.而ES6有着强大的目标，是使得JavaScript语言可以用来编写大型的复杂的应用程序，成为企业级开发语言。</p><p>对ES6的支持可以查看<a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a>，在这里可以清晰的了解到不同版本的浏览器对ES6功能的支持情况。如果你想现在就在浏览器使用ES6的特性，还可以通过引用兼容包的方式提前尝尝鲜。 <a href="https://github.com/paulmillr/es6-shim">https://github.com/paulmillr/es6-shim</a>。</p><p>环境支持推荐用js工具babel来编译<a href="http://babeljs.io/">http://babeljs.io/</a>。<br>变量与字符串</p><p>let是ES6中新增关键字。<br>它的作用类似于var，用来声明变量，但是所声明的变量，只在let命令所在的代码块内有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E1*&#x2F;</span><br><span class="line">if(true)&#123;</span><br><span class="line">    var a &#x3D; 1;</span><br><span class="line">    let b &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line">document.write(a+&#39;&lt;br&#x2F;&gt;&#39;);</span><br><span class="line">document.write(b+&#39;&lt;br&#x2F;&gt;&#39;); &#x2F;&#x2F; Uncaught ReferenceError: b is not defined</span><br></pre></td></tr></table></figure><p>Example2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E2*&#x2F;</span><br><span class="line">function f1() &#123;</span><br><span class="line">  var a &#x3D; 8;</span><br><span class="line">  let n &#x3D; 5;</span><br><span class="line">  if (true) &#123;</span><br><span class="line">      let n &#x3D; 10;</span><br><span class="line">      var a &#x3D; 20</span><br><span class="line">  &#125;</span><br><span class="line">  document.write(n); &#x2F;&#x2F; 5</span><br><span class="line">  document.write(a); &#x2F;&#x2F; 20</span><br><span class="line">&#125;</span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><blockquote><p>Q1：用let声明a变量默认为5，在if判断中let声明a为10，看a输出结果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*Exercises1*&#x2F;</span><br><span class="line">let a &#x3D; 5;</span><br><span class="line">if (true) &#123;</span><br><span class="line">    let a &#x3D; 10;</span><br><span class="line">&#125;</span><br><span class="line">document.write(a);&#x2F;&#x2F;5</span><br></pre></td></tr></table></figure><p>for循环的计数器，就很合适使用let命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E3*&#x2F;</span><br><span class="line">var a &#x3D; [];</span><br><span class="line">for (var i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] &#x3D; function () &#123;</span><br><span class="line">    document.write(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); </span><br><span class="line"></span><br><span class="line">var a &#x3D; [];</span><br><span class="line">for (let i &#x3D; 0; i &lt; 10; i++) &#123;</span><br><span class="line">  a[i] &#x3D; function () &#123;</span><br><span class="line">    document.write(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[6](); </span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const 声明的是常量，一旦声明，值将是不可变的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const PI &#x3D; 3.1415;</span><br><span class="line">PI &#x2F;&#x2F; 3.1415</span><br><span class="line"> </span><br><span class="line">PI &#x3D; 3;</span><br><span class="line">PI &#x2F;&#x2F; 3.1415</span><br><span class="line"> </span><br><span class="line">const PI &#x3D; 3.1;</span><br><span class="line">PI &#x2F;&#x2F; 3.1415</span><br></pre></td></tr></table></figure><p>const 也具有块级作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E4*&#x2F;</span><br><span class="line">if (true) &#123;</span><br><span class="line">  const max &#x3D; 5;</span><br><span class="line">&#125;</span><br><span class="line">document.write(max);  &#x2F;&#x2F;Uncaught ReferenceError: max is not defined</span><br><span class="line"></span><br><span class="line">if (true) &#123;</span><br><span class="line">  const max &#x3D; 5;</span><br><span class="line">  document.write(max);  &#x2F;&#x2F;5</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>const 不可重复声明</li></ul><p>/* E5*/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var message &#x3D; &quot;Hello!&quot;;</span><br><span class="line">let age &#x3D; 25;</span><br><span class="line"> </span><br><span class="line">const message &#x3D; &quot;Goodbye!&quot;;</span><br><span class="line">const age &#x3D; 30;&#x2F;&#x2F;cli:Duplicate declaration &quot;age&quot;</span><br></pre></td></tr></table></figure><p>const 指令指向变量所在的地址，所以对该变量进行属性设置是可行的（未改变变量地址），如果想完全不可变化（包括属性），那么可以使用冻结</p><p>/* E6*/</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const C1 &#x3D; &#123;&#125;;</span><br><span class="line">C1.a &#x3D; 1;</span><br><span class="line">document.write(C1.a); &#x2F;&#x2F; 1 </span><br><span class="line">C1 &#x3D; &#123;&#125;;  &#x2F;&#x2F; cli: C1 &#x3D; &#123;&#125;;  &#x2F;&#x2F; 报错  重新赋值，地址改变</span><br><span class="line"></span><br><span class="line">const C2 &#x3D; Object.freeze(&#123;&#125;); </span><br><span class="line">C2.a &#x3D; 1; </span><br><span class="line">document.write(C2.a);&#x2F;&#x2F;Uncaught TypeError: Can&#39;t add property a, object is not extensible</span><br></pre></td></tr></table></figure><blockquote><p>Q2:在if (true) { 声明一个const变量a，并为赋值为5， }在块级作用域中和外面，分别打印变量a看结果。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*Exercises2*&#x2F;</span><br><span class="line">if(true)&#123;</span><br><span class="line">  const a&#x3D;5;</span><br><span class="line">  document.write(&#39;a1:&#39;+a);</span><br><span class="line">&#125;</span><br><span class="line">document.write(&#39;a2:&#39;+a);&#x2F;&#x2F;Uncaught ReferenceError: a is not defined</span><br></pre></td></tr></table></figure><p>是否包含字符串三种新方法<br>传统上，JavaScript只有 indexOf 方法，可以用来确定一个字符串是否包含在另一个字符串中。ES6又提供了三种新方法。</p><ul><li>includes()：返回布尔值，表示是否找到了参数字符串。</li><li>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。</li><li>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;Hello world!&quot;;</span><br><span class="line"> </span><br><span class="line">str.startsWith(&quot;Hello&quot;) &#x2F;&#x2F; true</span><br><span class="line">str.endsWith(&quot;!&quot;) &#x2F;&#x2F; true</span><br><span class="line">str.includes(&quot;o&quot;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><p>这三个方法都支持第二个参数，表示开始搜索的位置。</p><ul><li>上面代码表示，使用第二个参数n时，endsWith 的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;Hello world!&quot;;</span><br><span class="line"> </span><br><span class="line">str.startsWith(&quot;world&quot;, 6) &#x2F;&#x2F; true</span><br><span class="line">str.endsWith(&quot;Hello&quot;, 5) &#x2F;&#x2F; true</span><br><span class="line">str.includes(&quot;Hello&quot;, 6) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure><p>repeat()原字符串重复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str &#x3D; &quot;x&quot;;</span><br><span class="line">str.repeat(3) &#x2F;&#x2F; &quot;xxx&quot;</span><br><span class="line"> </span><br><span class="line">var str1 &#x3D; &quot;hello&quot;;</span><br><span class="line">str1.repeat(2) &#x2F;&#x2F; &quot;hellohello&quot;</span><br></pre></td></tr></table></figure><p>标签模板<br>模板字符串前面有一个标识名tag，它是一个函数。整个表达式的返回值，就是tag函数处理模板字符串后的返回值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 5;</span><br><span class="line">var b &#x3D; 10;</span><br><span class="line"> </span><br><span class="line">tag&#96;Hello $&#123; a + b &#125; world $&#123; a * b &#125;&#96;;</span><br></pre></td></tr></table></figure><p>tag函数所有参数的实际值如下。</p><ul><li>第一个参数：[‘Hello ‘, ‘ world ‘]</li><li>第二个参数: 15</li><li>第三个参数：50</li></ul><p>也就是说，tag函数实际上以下面的形式调用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag([&#39;Hello &#39;, &#39; world &#39;], 15, 50)</span><br></pre></td></tr></table></figure><p>tag用法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E7*&#x2F;</span><br><span class="line">var a &#x3D; 5;</span><br><span class="line">var b &#x3D; 10;</span><br><span class="line"> </span><br><span class="line">function tag(s, v1, v2) &#123;</span><br><span class="line">  document.write(s[0]+&#39;&lt;br&#x2F;&gt;&#39;);</span><br><span class="line">  document.write(s[1]+&#39;&lt;br&#x2F;&gt;&#39;);</span><br><span class="line">  document.write(v1+&#39;&lt;br&#x2F;&gt;&#39;);</span><br><span class="line">  document.write(v2+&#39;&lt;br&#x2F;&gt;&#39;);</span><br><span class="line"> </span><br><span class="line">  return &quot;OK&quot;;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">tag&#96;Hello $&#123; a + b &#125; world $&#123; a * b&#125;&#96;;</span><br><span class="line">&#x2F;&#x2F; &quot;Hello &quot;</span><br><span class="line">&#x2F;&#x2F; &quot; world &quot;</span><br><span class="line">&#x2F;&#x2F; 15</span><br><span class="line">&#x2F;&#x2F; 50</span><br><span class="line">&#x2F;&#x2F; &quot;OK&quot;</span><br></pre></td></tr></table></figure><p>模板字符串可以是原始的<br>ES6还为原生的String对象，提供了一个raw方法。<br>若使用String.raw 作为模板字符串的前缀，则模板字符串可以是原始(raw)的。反斜线也不再是特殊字符，\n 也不会被解释成换行符：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*E8*&#x2F;</span><br><span class="line">var raw &#x3D;String(&#39;Not a newline: \n&#39;);</span><br><span class="line">document.write(raw &#x3D;&#x3D;&#x3D; &#39;Not a newline: \\n&#39;);&#x2F;&#x2F; false</span><br><span class="line"></span><br><span class="line"> let raw &#x3D; String.raw&#96;Not a newline: \n&#96;;</span><br><span class="line"> document.write(raw &#x3D;&#x3D;&#x3D; &#39;Not a newline: \\n&#39;); &#x2F;&#x2F; true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有兴趣的小伙伴们还可以看下下面文档:</p><ul><li><a href="http://es6.ruanyifeng.com/#docs/let">let和const命令-阮一峰</a></li><li><a href="http://es6.ruanyifeng.com/#docs/let">let和const命令-阮一峰2</a></li><li><a href="http://www.codedata.com.tw/javascript/introducing-es6-1-harmony-history">ES6harmony</a></li><li><a href="https://babeljs.io/">babeljs</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ECMAScript 6（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。&lt;/p&gt;
&lt;p&gt;Mozilla公司将在这个标准的基础上，推出JavaScript 2.而ES6有着强大的目标，是使得JavaScript语言可以用来编写大型的复</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://blog.jddfe.com/tags/ES6/"/>
    
    <category term="JS" scheme="https://blog.jddfe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>初探ES6新功能</title>
    <link href="https://blog.jddfe.com/2016/04/02/%E5%88%9D%E6%8E%A2ES6%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>https://blog.jddfe.com/2016/04/02/%E5%88%9D%E6%8E%A2ES6%E6%96%B0%E5%8A%9F%E8%83%BD/</id>
    <published>2016-04-02T12:09:10.000Z</published>
    <updated>2020-11-10T14:22:20.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-6-git-io-es6features"><a href="#ECMAScript-6-git-io-es6features" class="headerlink" title="ECMAScript 6 git.io/es6features"></a>ECMAScript 6 <sup><a href="http://git.io/es6features">git.io/es6features</a></sup></h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ECMAScript 6，2015年也被称为ECMAScript 标准的最新版本。标志着最新的语言，是及2009年ES5发布后相继6年出的版本。这些功能的实现主要的JavaScript引擎统计如右边链接(现在正在完善)(<a href="http://kangax.github.io/es5-compat-table/es6/">http://kangax.github.io/es5-compat-table/es6/</a>)</p><p>ES6的完整规范如左边网址下<a href="http://www.ecma-international.org/ecma-262/6.0/">ES6 standard</a>。 </p><p>ES6包括以下几个新功能:</p><ul><li><a href="#arrows">arrows</a></li><li><a href="#classes">classes</a></li><li><a href="#enhanced-object-literals">enhanced object literals</a></li><li><a href="#template-strings">template strings</a></li><li><a href="#destructuring">destructuring</a></li><li><a href="#default--rest--spread">default + rest + spread</a></li><li><a href="#let--const">let + const</a></li><li><a href="#iterators--forof">iterators + for..of</a></li><li><a href="#generators">generators</a></li><li><a href="#unicode">unicode</a></li><li><a href="#modules">modules</a></li><li><a href="#module-loaders">module loaders</a></li><li><a href="#map--set--weakmap--weakset">map + set + weakmap + weakset</a></li><li><a href="#proxies">proxies</a></li><li><a href="#symbols">symbols</a></li><li><a href="#subclassable-built-ins">subclassable built-ins</a></li><li><a href="#promises">promises</a></li><li><a href="#math--number--string--array--object-apis">math + number + string + array + object APIs</a></li><li><a href="#binary-and-octal-literals">binary and octal literals</a></li><li><a href="#reflect-api">reflect api</a></li><li><a href="#tail-calls">tail calls</a></li></ul><h2 id="ECMAScript-6-功能"><a href="#ECMAScript-6-功能" class="headerlink" title="ECMAScript 6 功能"></a>ECMAScript 6 功能</h2><h3 id="Arrows"><a href="#Arrows" class="headerlink" title="Arrows"></a>Arrows</h3><p>Arrows are a function shorthand using the <code>=&gt;</code> syntax.  They are syntactically similar to the related feature in C#, Java 8 and CoffeeScript.  They support both statement block bodies as well as expression bodies which return the value of the expression.  Unlike functions, arrows share the same lexical <code>this</code> as their surrounding code.</p><p>箭头函数简单的说是用＝&gt;语法。其语法的相关特性类似于c,Java 8和CoffeeScript。他们同时支持声明块体以及表达身体的返回值的表达式。与方法不同，箭头函数分享了相同语法的this以及它周边代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Expression bodies</span><br><span class="line">var odds &#x3D; evens.map(v &#x3D;&gt; v + 1);</span><br><span class="line">var nums &#x3D; evens.map((v, i) &#x3D;&gt; v + i);</span><br><span class="line">var pairs &#x3D; evens.map(v &#x3D;&gt; (&#123;even: v, odd: v + 1&#125;));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Statement bodies</span><br><span class="line">nums.forEach(v &#x3D;&gt; &#123;</span><br><span class="line">  if (v % 5 &#x3D;&#x3D;&#x3D; 0)</span><br><span class="line">    fives.push(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Lexical this</span><br><span class="line">var bob &#x3D; &#123;</span><br><span class="line">  _name: &quot;Bob&quot;,</span><br><span class="line">  _friends: [],</span><br><span class="line">  printFriends() &#123;</span><br><span class="line">    this._friends.forEach(f &#x3D;&gt;</span><br><span class="line">      console.log(this._name + &quot; knows &quot; + f));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">nums.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">       fives.push(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">nums.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">if</span> (v % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">       fives.push(v)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><p>ES6 classes are a simple sugar over the prototype-based OO pattern.  Having a single convenient declarative form makes class patterns easier to use, and encourages interoperability.  Classes support prototype-based inheritance, super calls, instance and static methods and constructors.</p><p>ES6类是一个简单基于原型的面向对象模式。它以类模式声明,并鼓励互操作性。类支持基于原型的继承、超级调用实例和静态方法和构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkinnedMesh</span> <span class="keyword">extends</span> <span class="title">THREE</span>.<span class="title">Mesh</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">geometry, materials</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(geometry, materials);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.idMatrix = SkinnedMesh.defaultMatrix();</span><br><span class="line">    <span class="built_in">this</span>.bones = [];</span><br><span class="line">    <span class="built_in">this</span>.boneMatrices = [];</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">camera</span>)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="built_in">super</span>.update();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> <span class="title">boneCount</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.bones.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title">matrixType</span>(<span class="params">matrixType</span>) &#123;</span><br><span class="line">    <span class="built_in">this</span>.idMatrix = SkinnedMesh[matrixType]();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">defaultMatrix</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> THREE.Matrix4();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> Shape = <span class="function"><span class="keyword">function</span> (<span class="params">id, x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.move(x, y);</span><br><span class="line">&#125;;</span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">id, x, y</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id</span><br><span class="line">        <span class="built_in">this</span>.move(x, y)</span><br><span class="line">    &#125;</span><br><span class="line">    move (x, y) &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x</span><br><span class="line">        <span class="built_in">this</span>.y = y</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Enhanced-Object-Literals"><a href="#Enhanced-Object-Literals" class="headerlink" title="Enhanced Object Literals"></a>Enhanced Object Literals</h3><p>Object literals are extended to support setting the prototype at construction, shorthand for <code>foo: foo</code> assignments, defining methods, making super calls, and computing property names with expressions.  Together, these also bring object literals and class declarations closer together, and let object-based design benefit from some of the same conveniences.</p><p>对象文本扩展为支持设置原型结构,简称“foo:foo”模式,定义方法,使超级调用,和计算属性名表达式。在一起,这些也将文本对象和类声明更紧密地联系在一起,并让基于对象的设计更加便利的使用在一起。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="comment">// __proto__</span></span><br><span class="line">    __proto__: theProtoObj,</span><br><span class="line">    <span class="comment">// Shorthand for ‘handler: handler’</span></span><br><span class="line">    handler,</span><br><span class="line">    <span class="comment">// Methods</span></span><br><span class="line">    <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">     <span class="comment">// Super calls</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;d &quot;</span> + <span class="built_in">super</span>.toString();</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Computed (dynamic) property names</span></span><br><span class="line">    [ <span class="string">&#x27;prop_&#x27;</span> + (<span class="function">() =&gt;</span> <span class="number">42</span>)() ]: <span class="number">42</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    foo: <span class="string">&quot;bar&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line">obj[ <span class="string">&quot;prop_&quot;</span> + foo() ] = <span class="number">42</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">obj = &#123;</span><br><span class="line">    foo: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">    [ <span class="string">&quot;prop_&quot;</span> + foo() ]: <span class="number">42</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Template-Strings"><a href="#Template-Strings" class="headerlink" title="Template Strings"></a>Template Strings</h3><p>Template strings provide syntactic sugar for constructing strings.  This is similar to string interpolation features in Perl, Python and more.  Optionally, a tag can be added to allow the string construction to be customized, avoiding injection attacks or constructing higher level data structures from string contents.</p><p>模板构建字符串的字符串提供更简便的写法。这类似于字符串插值特性在Perl、Python和更多。可选地,可以添加一个标签允许自定义字符串建设,避免注入攻击或从字符串构造更高层次数据结构的内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Basic literal string creation</span></span><br><span class="line"><span class="string">`In JavaScript &#x27;\n&#x27; is a line-feed.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Multiline strings</span></span><br><span class="line"><span class="string">`In JavaScript this is</span></span><br><span class="line"><span class="string"> not legal.`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String interpolation</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;Bob&quot;</span>, time = <span class="string">&quot;today&quot;</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Construct an HTTP request prefix is used to interpret the replacements and construction</span></span><br><span class="line">GET<span class="string">`http://foo.org/bar?a=<span class="subst">$&#123;a&#125;</span>&amp;b=<span class="subst">$&#123;b&#125;</span></span></span><br><span class="line"><span class="string">    Content-Type: application/json</span></span><br><span class="line"><span class="string">    X-Credentials: <span class="subst">$&#123;credentials&#125;</span></span></span><br><span class="line"><span class="string">    &#123; &quot;foo&quot;: <span class="subst">$&#123;foo&#125;</span>,</span></span><br><span class="line"><span class="string">      &quot;bar&quot;: <span class="subst">$&#123;bar&#125;</span>&#125;`</span>(myOnReadyStateChangeHandler);</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> customer = &#123; <span class="attr">name</span>: <span class="string">&quot;Foo&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> card = &#123; <span class="attr">amount</span>: <span class="number">7</span>, <span class="attr">product</span>: <span class="string">&quot;Bar&quot;</span>, <span class="attr">unitprice</span>: <span class="number">42</span> &#125;;</span><br><span class="line">message = <span class="string">&quot;Hello &quot;</span> + customer.name + <span class="string">&quot;,\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;want to buy &quot;</span> + card.amount + <span class="string">&quot; &quot;</span> + card.product + <span class="string">&quot; for\n&quot;</span> +</span><br><span class="line"><span class="string">&quot;a total of &quot;</span> + (card.amount * card.unitprice) + <span class="string">&quot; bucks?&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> customer = &#123; <span class="attr">name</span>: <span class="string">&quot;Foo&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> card = &#123; <span class="attr">amount</span>: <span class="number">7</span>, <span class="attr">product</span>: <span class="string">&quot;Bar&quot;</span>, <span class="attr">unitprice</span>: <span class="number">42</span> &#125;</span><br><span class="line">message = <span class="string">`Hello <span class="subst">$&#123;customer.name&#125;</span>,</span></span><br><span class="line"><span class="string">want to buy <span class="subst">$&#123;card.amount&#125;</span> <span class="subst">$&#123;card.product&#125;</span> for</span></span><br><span class="line"><span class="string">a total of <span class="subst">$&#123;card.amount * card.unitprice&#125;</span> bucks?`</span></span><br></pre></td></tr></table></figure><h3 id="Destructuring"><a href="#Destructuring" class="headerlink" title="Destructuring"></a>Destructuring</h3><p>Destructuring allows binding using pattern matching, with support for matching arrays and objects.  Destructuring is fail-soft, similar to standard object lookup <code>foo[&quot;bar&quot;]</code>, producing <code>undefined</code> values when not found.</p><p>解构允许绑定使用模式匹配,支持匹配数组和对象。解构是可以让故障弱化,类似于标准对象查找foo(“bar”),生产时没有发现未定义的值‘undefined’。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// list matching</span></span><br><span class="line"><span class="keyword">var</span> [a, , b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// object matching</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">op</span>: a, <span class="attr">lhs</span>: &#123; <span class="attr">op</span>: b &#125;, <span class="attr">rhs</span>: c &#125;</span><br><span class="line">       = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// object matching shorthand</span></span><br><span class="line"><span class="comment">// binds `op`, `lhs` and `rhs` in scope</span></span><br><span class="line"><span class="keyword">var</span> &#123;op, lhs, rhs&#125; = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Can be used in parameter position</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">&#123;name: x&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">g(&#123;<span class="attr">name</span>: <span class="number">5</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fail-soft destructuring</span></span><br><span class="line"><span class="keyword">var</span> [a] = [];</span><br><span class="line">a === <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fail-soft destructuring with defaults</span></span><br><span class="line"><span class="keyword">var</span> [a = <span class="number">1</span>] = [];</span><br><span class="line">a === <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">op</span>: a, <span class="attr">lhs</span>: &#123; <span class="attr">op</span>: b &#125;, <span class="attr">rhs</span>: c &#125; = getASTNode()</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> tmp = getASTNode();</span><br><span class="line"><span class="keyword">var</span> a = tmp.op;</span><br><span class="line"><span class="keyword">var</span> b = tmp.lhs.op;</span><br><span class="line"><span class="keyword">var</span> c = tmp.rhs;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = arg[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> val  = arg[<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">console</span>.log(name, val);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = arg.name;</span><br><span class="line">    <span class="keyword">var</span> v = arg.val;</span><br><span class="line">    <span class="built_in">console</span>.log(n, v);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = arg.name;</span><br><span class="line">    <span class="keyword">var</span> val  = arg.val;</span><br><span class="line">    <span class="built_in">console</span>.log(name, val);</span><br><span class="line">&#125;;</span><br><span class="line">f([ <span class="string">&quot;bar&quot;</span>, <span class="number">42</span> ]);</span><br><span class="line">g(&#123; <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">val</span>:  <span class="number">7</span> &#125;);</span><br><span class="line">h(&#123; <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">val</span>: <span class="number">42</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span> (<span class="params">[ name, val ]</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span> (<span class="params">&#123; name: n, val: v &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(n, v)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">h</span> (<span class="params">&#123; name, val &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name, val)</span><br><span class="line">&#125;</span><br><span class="line">f([ <span class="string">&quot;bar&quot;</span>, <span class="number">42</span> ])</span><br><span class="line">g(&#123; <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">val</span>:  <span class="number">7</span> &#125;)</span><br><span class="line">h(&#123; <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span>, <span class="attr">val</span>: <span class="number">42</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="Default-Rest-Spread"><a href="#Default-Rest-Spread" class="headerlink" title="Default + Rest + Spread"></a>Default + Rest + Spread</h3><p>Callee-evaluated default parameter values.  Turn an array into consecutive arguments in a function call.  Bind trailing parameters to an array.  Rest replaces the need for <code>arguments</code> and addresses common cases more directly.</p><p>Callee-evaluated默认参数值。把一个数组转化为连续函数调用的参数。剩余的参数绑定到一个数组中。其他取代了需要的参数和地址一般情况下更直接。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y=<span class="number">12</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// y is 12 if not passed (or passed as undefined)</span></span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>) == <span class="number">15</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, ...y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// y is an Array</span></span><br><span class="line">  <span class="keyword">return</span> x * y.length;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">3</span>, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>) == <span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Pass each elem of array as argument</span></span><br><span class="line">f(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) == <span class="number">6</span></span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="number">7</span> ];</span><br><span class="line"><span class="keyword">var</span> other = [ <span class="number">1</span>, <span class="number">2</span> ].concat(params); <span class="comment">// [ 1, 2, &quot;hello&quot;, true, 7 ]</span></span><br><span class="line">f.apply(<span class="literal">undefined</span>, [ <span class="number">1</span>, <span class="number">2</span> ].concat(params)) === <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> chars = str.split(<span class="string">&quot;&quot;</span>); <span class="comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">var</span> params = [ <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>, <span class="number">7</span> ]</span><br><span class="line"><span class="keyword">var</span> other = [ <span class="number">1</span>, <span class="number">2</span>, ...params ] <span class="comment">// [ 1, 2, &quot;hello&quot;, true, 7 ]</span></span><br><span class="line">f(<span class="number">1</span>, <span class="number">2</span>, ...params) === <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">var</span> chars = [ ...str ] <span class="comment">// [ &quot;f&quot;, &quot;o&quot;, &quot;o&quot; ]</span></span><br></pre></td></tr></table></figure><h3 id="Let-Const"><a href="#Let-Const" class="headerlink" title="Let + Const"></a>Let + Const</h3><p>Block-scoped binding constructs.  <code>let</code> is the new <code>var</code>.  <code>const</code> is single-assignment.  Static restrictions prevent use before assignment.</p><p>Block-scoped绑定结构。let”是新的“var”。“常量”是单一赋值消息快。静态限制防止作业之前使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> x;</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// okay, block scoped name</span></span><br><span class="line">      <span class="keyword">const</span> x = <span class="string">&quot;sneaky&quot;</span>;</span><br><span class="line">      <span class="comment">// error, const</span></span><br><span class="line">      x = <span class="string">&quot;foo&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// error, already declared in block</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="string">&quot;inner&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="keyword">typeof</span> <span class="built_in">global</span> === <span class="string">&quot;object&quot;</span> ? <span class="built_in">global</span> : <span class="built_in">window</span>, <span class="string">&quot;PI&quot;</span>, &#123;</span><br><span class="line">    value:        <span class="number">3.141593</span>,</span><br><span class="line">    enumerable:   <span class="literal">true</span>,</span><br><span class="line">    writable:     <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line">PI &gt; <span class="number">3.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141593</span></span><br><span class="line">PI &gt; <span class="number">3.0</span></span><br></pre></td></tr></table></figure><h3 id="Iterators-For-Of"><a href="#Iterators-For-Of" class="headerlink" title="Iterators + For..Of"></a>Iterators + For..Of</h3><p>Iterator objects enable custom iteration like CLR IEnumerable or Java Iterable.  Generalize <code>for..in</code> to custom iterator-based iteration with <code>for..of</code>.  Don’t require realizing an array, enabling lazy design patterns like LINQ.</p><p>迭代器对象启用自定义迭代就像CLR IEnumerable或Java Iterable。概括的. .概括来说它就是将‘fo..in’等循环用‘for..of’来写。不需要实现一个数组,使懒惰像LINQ设计模式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="function"><span class="title">next</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        [pre, cur] = [cur, pre + cur];</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Iteration is based on these duck-typed interfaces (using <a href="http://typescriptlang.org/">TypeScript</a> type syntax for exposition only):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IteratorResult &#123;</span><br><span class="line">  done: <span class="built_in">boolean</span>;</span><br><span class="line">  value: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Iterator &#123;</span><br><span class="line">  next(): IteratorResult;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> Iterable &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator](): Iterator</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> fibonacci = &#123;</span><br><span class="line">    next: ((<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            tmp = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur += tmp;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n;</span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    n = fibonacci.next();</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">        <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">           next () &#123;</span><br><span class="line">               [ pre, cur ] = [ cur, pre + cur ]</span><br><span class="line">               <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">console</span>.log(n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h3><p>Generators simplify iterator-authoring using <code>function*</code> and <code>yield</code>.  A function declared as function* returns a Generator instance.  Generators are subtypes of iterators which include additional  <code>next</code> and <code>throw</code>.  These enable values to flow back into the generator, so <code>yield</code> is an expression form which returns a value (or throws).</p><p>生成器简化iterator-authoring使用“function<em>”和“yield”。一个函数声明为函数</em>返回一个生成器实例。生成器是迭代器的子类型,包括额外的“next”和“throw”。这可使用的值回流到生成器,因此“产量”是一种表达形式返回一个值(或抛出)。</p><p>Note: Can also be used to enable ‘await’-like async programming, see also ES7 <code>await</code> proposal.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur += temp;</span><br><span class="line">      <span class="keyword">yield</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The generator interface is (using <a href="http://typescriptlang.org/">TypeScript</a> type syntax for exposition only):</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Generator <span class="keyword">extends</span> Iterator &#123;</span><br><span class="line">    next(value?: <span class="built_in">any</span>): IteratorResult;</span><br><span class="line">    <span class="keyword">throw</span>(exception: <span class="built_in">any</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">range</span> (<span class="params">start, end, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        list.push(start);</span><br><span class="line">        start += step;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> r = range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; r.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r[i]); <span class="comment">// 0, 2, 4, 6, 8</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">range</span> (<span class="params">start, end, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">        <span class="keyword">yield</span> start</span><br><span class="line">        start += step</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> range(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i) <span class="comment">// 0, 2, 4, 6, 8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>Non-breaking additions to support full Unicode, including new Unicode literal form in strings and new RegExp <code>u</code> mode to handle code points, as well as new APIs to process strings at the 21bit code points level.  These additions support building global apps in JavaScript.</p><p>可以帮助增加完整的Unicode的支持,包括新的Unicode字符串中的文字形式和新的正则表达式处理代码点“u”模式,以及新的api来处理字符串在21位代码点水平。这些添加支持建立全球JavaScript应用程序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// same as ES5.1</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new RegExp behaviour, opt-in ‘u’</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.match(<span class="regexp">/./u</span>)[<span class="number">0</span>].length == <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new form</span></span><br><span class="line"><span class="string">&quot;\u&#123;20BB7&#125;&quot;</span>==<span class="string">&quot;𠮷&quot;</span>==<span class="string">&quot;\uD842\uDFB7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// new String ops</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.codePointAt(<span class="number">0</span>) == <span class="number">0x20BB7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for-of iterates code points</span></span><br><span class="line"><span class="function"><span class="title">for</span>(<span class="params"><span class="keyword">var</span> c <span class="keyword">of</span> <span class="string">&quot;𠮷&quot;</span></span>)</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.length === <span class="number">2</span>;</span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.match(<span class="regexp">/(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF][\uD800-\uDBFF][\uDC00-\uDFFF][\uD800-\uDBFF](?![\uDC00-\uDFFF])(?:[^\uD800-\uDBFF]^)[\uDC00-\uDFFF])/</span>)[<span class="number">0</span>].length === <span class="number">2</span>;</span><br><span class="line"><span class="string">&quot;𠮷&quot;</span> === <span class="string">&quot;\uD842\uDFB7&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.length === <span class="number">2</span></span><br><span class="line"><span class="string">&quot;𠮷&quot;</span>.match(<span class="regexp">/./u</span>)[<span class="number">0</span>].length === <span class="number">2</span></span><br><span class="line"><span class="string">&quot;\u&#123;20BB7&#125;&quot;</span> === <span class="string">&quot;𠮷&quot;</span> === <span class="string">&quot;\uD842\uDFB7&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>Language-level support for modules for component definition.  Codifies patterns from popular JavaScript module loaders (AMD, CommonJS). Runtime behaviour defined by a host-defined default loader.  Implicitly async model – no code executes until requested modules are available and processed.</p><p>为组件定义语言级支持模块。汇总模式从流行的JavaScript模块加载器(AMD,CommonJS)。运行时行为由host-defined定义默认加载程序。隐式异步模型——没有代码执行,直到请求模块是可用的和加工。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/math.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> pi = <span class="number">3.141593</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> math <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br><span class="line">alert(<span class="string">&quot;2π = &quot;</span> + math.sum(math.pi, math.pi));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// otherApp.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;sum, pi&#125; <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br><span class="line">alert(<span class="string">&quot;2π = &quot;</span> + sum(pi, pi));</span><br></pre></td></tr></table></figure><p>Some additional features include <code>export default</code> and <code>export *</code>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib/mathplusplus.js</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.log(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> ln, &#123;pi, e&#125; <span class="keyword">from</span> <span class="string">&quot;lib/mathplusplus&quot;</span>;</span><br><span class="line">alert(<span class="string">&quot;2π = &quot;</span> + ln(e)*pi*<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"></span><br><span class="line">LibMathPP = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (symbol <span class="keyword">in</span> LibMath)</span><br><span class="line">    <span class="keyword">if</span> (LibMath.hasOwnProperty(symbol))</span><br><span class="line">        LibMathPP[symbol] = LibMath[symbol];</span><br><span class="line">LibMathPP.e = <span class="number">2.71828182846</span>;</span><br><span class="line">LibMathPP.exp = <span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">Math</span>.exp(x) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  someApp.js</span></span><br><span class="line"><span class="keyword">var</span> exp = LibMathPP.exp, pi = LibMathPP.pi, e = libMathPP.e;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;e^&#123;π&#125; = &quot;</span> + exp(pi));</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;lib/math&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> e = <span class="number">2.71828182846</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (x) =&gt; <span class="built_in">Math</span>.exp(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  someApp.js</span></span><br><span class="line"><span class="keyword">import</span> exp, &#123; pi, e &#125; <span class="keyword">from</span> <span class="string">&quot;lib/mathplusplus&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;e^&#123;π&#125; = &quot;</span> + exp(pi))</span><br></pre></td></tr></table></figure><h3 id="Module-Loaders"><a href="#Module-Loaders" class="headerlink" title="Module Loaders"></a>Module Loaders</h3><p>Module loaders support:</p><ul><li>Dynamic loading</li><li>State isolation</li><li>Global namespace isolation</li><li>Compilation hooks</li><li>Nested virtualization</li></ul><p>The default module loader can be configured, and new loaders can be constructed to evaluate and load code in isolated or constrained contexts.</p><p>默认模块加载器可以配置,可以评估和构造新的加载器加载代码隔离或语境的限制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dynamic loading – ‘System’ is default loader</span></span><br><span class="line">System.import(<span class="string">&#x27;lib/math&#x27;</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">m</span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">&quot;2π = &quot;</span> + m.sum(m.pi, m.pi));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create execution sandboxes – new Loaders</span></span><br><span class="line"><span class="keyword">var</span> loader = <span class="keyword">new</span> Loader(&#123;</span><br><span class="line">  <span class="built_in">global</span>: fixup(<span class="built_in">window</span>) <span class="comment">// replace ‘console.log’</span></span><br><span class="line">&#125;);</span><br><span class="line">loader.eval(<span class="string">&quot;console.log(&#x27;hello world!&#x27;);&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Directly manipulate module cache</span></span><br><span class="line">System.get(<span class="string">&#x27;jquery&#x27;</span>);</span><br><span class="line">System.set(<span class="string">&#x27;jquery&#x27;</span>, Module(&#123;<span class="attr">$</span>: $&#125;)); <span class="comment">// WARNING: not yet finalized</span></span><br></pre></td></tr></table></figure><h3 id="Map-Set-WeakMap-WeakSet"><a href="#Map-Set-WeakMap-WeakSet" class="headerlink" title="Map + Set + WeakMap + WeakSet"></a>Map + Set + WeakMap + WeakSet</h3><p>Efficient data structures for common algorithms.  WeakMaps provides leak-free object-key’d side tables.</p><p>数据结构常用算法效率。WeakMaps提供对象键索引表。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sets</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">s.add(<span class="string">&quot;hello&quot;</span>).add(<span class="string">&quot;goodbye&quot;</span>).add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.size === <span class="number">2</span>;</span><br><span class="line">s.has(<span class="string">&quot;hello&quot;</span>) === <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Maps</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">m.set(<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>);</span><br><span class="line">m.set(s, <span class="number">34</span>);</span><br><span class="line">m.get(s) == <span class="number">34</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Maps</span></span><br><span class="line"><span class="keyword">var</span> wm = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line">wm.set(s, &#123; <span class="attr">extra</span>: <span class="number">42</span> &#125;);</span><br><span class="line">wm.size === <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Weak Sets</span></span><br><span class="line"><span class="keyword">var</span> ws = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line">ws.add(&#123; <span class="attr">data</span>: <span class="number">42</span> &#125;);</span><br><span class="line"><span class="comment">// Because the added object has no other references, it will not be held in the set</span></span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> m = &#123;&#125;;</span><br><span class="line">m[<span class="string">&quot;hello&quot;</span>] = <span class="number">42</span>;</span><br><span class="line"><span class="comment">// no equivalent in ES5</span></span><br><span class="line"><span class="comment">// no equivalent in ES5</span></span><br><span class="line"><span class="built_in">Object</span>.keys(m).length === <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> m) &#123;</span><br><span class="line">    <span class="keyword">if</span> (m.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">var</span> val = m[key];</span><br><span class="line">        <span class="built_in">console</span>.log(key + <span class="string">&quot; = &quot;</span> + val);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">m.set(<span class="string">&quot;hello&quot;</span>, <span class="number">42</span>)</span><br><span class="line">m.set(s, <span class="number">34</span>)</span><br><span class="line">m.get(s) === <span class="number">34</span></span><br><span class="line">m.size === <span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [ key, val ] <span class="keyword">of</span> m.entries())</span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">&quot; = &quot;</span> + val)</span><br></pre></td></tr></table></figure><h3 id="Proxies"><a href="#Proxies" class="headerlink" title="Proxies"></a>Proxies</h3><p>Proxies enable creation of objects with the full range of behaviors available to host objects.  Can be used for interception, object virtualization, logging/profiling, etc.</p><p>代理启用创建对象的全部行为可用主机对象。可用于拦截、对象虚拟化,日志/分析等,这是一个新功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Proxying a normal object</span></span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;name&#125;</span>!`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p.world === <span class="string">&#x27;Hello, world!&#x27;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Proxying a function object</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">&#x27;I am the target&#x27;</span>; &#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  apply: <span class="function"><span class="keyword">function</span> (<span class="params">receiver, ...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am the proxy&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">p() === <span class="string">&#x27;I am the proxy&#x27;</span>;</span><br></pre></td></tr></table></figure><p>There are traps available for all of the runtime-level meta-operations:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler =</span><br><span class="line">&#123;</span><br><span class="line">  get:...,</span><br><span class="line">  set:...,</span><br><span class="line">  has:...,</span><br><span class="line">  deleteProperty:...,</span><br><span class="line">  apply:...,</span><br><span class="line">  construct:...,</span><br><span class="line">  getOwnPropertyDescriptor:...,</span><br><span class="line">  defineProperty:...,</span><br><span class="line">  getPrototypeOf:...,</span><br><span class="line">  setPrototypeOf:...,</span><br><span class="line">  enumerate:...,</span><br><span class="line">  ownKeys:...,</span><br><span class="line">  preventExtensions:...,</span><br><span class="line">  isExtensible:...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Symbols"><a href="#Symbols" class="headerlink" title="Symbols"></a>Symbols</h3><p>Symbols enable access control for object state.  Symbols allow properties to be keyed by either <code>string</code> (as in ES5) or <code>symbol</code>.  Symbols are a new primitive type. Optional <code>name</code> parameter used in debugging - but is not part of identity.  Symbols are unique (like gensym), but not private since they are exposed via reflection features like <code>Object.getOwnPropertySymbols</code>.</p><p>符号启用访问控制对象状态。符号允许键属性的“string”(如ES5)或“symbol”。符号是一个新的原始类型。可选的“name”参数用于调试——但不是身份的一部分。符号是独一无二的(比如gensym),而不是个人,因为他们是通过反射特性,如“Object.getOwnPropertySymbols”。这是也是一个新功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyClass = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// module scoped symbol</span></span><br><span class="line">  <span class="keyword">var</span> key = <span class="built_in">Symbol</span>(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MyClass</span>(<span class="params">privateData</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>[key] = privateData;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  MyClass.prototype = &#123;</span><br><span class="line">    doStuff: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ... <span class="built_in">this</span>[key] ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> MyClass;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> MyClass(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">c[<span class="string">&quot;key&quot;</span>] === <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">### Subclassable Built-ins</span><br><span class="line">In ES6, built-ins like <span class="string">`Array`</span>, <span class="string">`Date`</span> and DOM <span class="string">`Element`</span>s can be subclassed.</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span> construction <span class="keyword">for</span> a <span class="function"><span class="keyword">function</span> <span class="title">named</span> `<span class="title">Ctor</span>` <span class="title">now</span> <span class="title">uses</span> <span class="title">two</span>-<span class="title">phases</span> (<span class="params">both virtually dispatched</span>):</span></span><br><span class="line"><span class="function">- <span class="title">Call</span> `<span class="title">Ctor</span>[@@<span class="title">create</span>]` <span class="title">to</span> <span class="title">allocate</span> <span class="title">the</span> <span class="title">object</span>, <span class="title">installing</span> <span class="title">any</span> <span class="title">special</span> <span class="title">behavior</span></span></span><br><span class="line"><span class="function">- <span class="title">Invoke</span> <span class="title">constructor</span> <span class="title">on</span> <span class="title">new</span> <span class="title">instance</span> <span class="title">to</span> <span class="title">initialize</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">The</span> <span class="title">known</span> `@@<span class="title">create</span>` <span class="title">symbol</span> <span class="title">is</span> <span class="title">available</span> <span class="title">via</span> `<span class="title">Symbol</span>.<span class="title">create</span>`.  <span class="title">Built</span>-<span class="title">ins</span> <span class="title">now</span> <span class="title">expose</span> <span class="title">their</span> `@@<span class="title">create</span>` <span class="title">explicitly</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">在<span class="title">ES6</span>,应有尽有,如“<span class="title">Array</span>”,“<span class="title">Date</span>”和<span class="title">DOM</span>&quot;<span class="title">Element</span>&quot;的可以派生子类。</span></span><br><span class="line"><span class="function">　　</span></span><br><span class="line"><span class="function">对象构造函数名为“<span class="title">Ctor</span>”现在使用两(<span class="params">几乎两派</span>):</span></span><br><span class="line"><span class="function">- 称之为“<span class="title">Ctor</span>(<span class="params">@@create</span>)的分配对象,安装任何特殊的行为</span></span><br><span class="line"><span class="function">- 新实例上调用构造函数来初始化</span></span><br><span class="line"><span class="function">　　</span></span><br><span class="line"><span class="function">已知的“@@<span class="title">create</span>”符号是可以通过“<span class="title">Symbol</span>.<span class="title">create</span>”。内置模板现在公开他们的@@<span class="title">create</span>明确。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">```<span class="title">JavaScript</span></span></span><br><span class="line"><span class="function">// <span class="title">Pseudo</span>-<span class="title">code</span> <span class="title">of</span> <span class="title">Array</span></span></span><br><span class="line"><span class="function"><span class="title">class</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">...args</span>)</span> &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">    <span class="keyword">static</span> [<span class="built_in">Symbol</span>.create]() &#123;</span><br><span class="line">        <span class="comment">// Install special [[DefineOwnProperty]]</span></span><br><span class="line">        <span class="comment">// to magically update &#x27;length&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// User code of Array subclass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">...args</span>)</span> &#123; <span class="built_in">super</span>(...args); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Two-phase &#x27;new&#x27;:</span></span><br><span class="line"><span class="comment">// 1) Call @@create to allocate object</span></span><br><span class="line"><span class="comment">// 2) Invoke constructor on new instance</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> MyArray();</span><br><span class="line">arr[<span class="number">1</span>] = <span class="number">12</span>;</span><br><span class="line">arr.length == <span class="number">2</span></span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;b&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// no equivalent in ES5</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj); <span class="comment">// [ &quot;a&quot;, &quot;b&quot; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;b&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;)</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">&quot;c&quot;</span>)] = <span class="number">3</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// [ &quot;a&quot;, &quot;b&quot;, Symbol(c) ]</span></span><br></pre></td></tr></table></figure><h3 id="Math-Number-String-Array-Object-APIs"><a href="#Math-Number-String-Array-Object-APIs" class="headerlink" title="Math + Number + String + Array + Object APIs"></a>Math + Number + String + Array + Object APIs</h3><p>Many new library additions, including core Math libraries, Array conversion helpers, String helpers, and Object.assign for copying.</p><p>许多新图书馆补充,包括核心数学库,数组转换帮手,字符串助手,和对象。分配进行复制。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.EPSILON</span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">Infinity</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Number</span>.isNaN(<span class="string">&quot;NaN&quot;</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Math</span>.acosh(<span class="number">3</span>) <span class="comment">// 1.762747174039086</span></span><br><span class="line"><span class="built_in">Math</span>.hypot(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">Math</span>.imul(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">1</span>, <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">32</span>) - <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;abcde&quot;</span>.includes(<span class="string">&quot;cd&quot;</span>) <span class="comment">// true</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span>.repeat(<span class="number">3</span>) <span class="comment">// &quot;abcabcabc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;*&#x27;</span>)) <span class="comment">// Returns a real Array</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">// Similar to new Array(...), but without special one-arg behavior</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>].fill(<span class="number">7</span>, <span class="number">1</span>) <span class="comment">// [0,7,7]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].find(<span class="function"><span class="params">x</span> =&gt;</span> x == <span class="number">3</span>) <span class="comment">// 3</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].findIndex(<span class="function"><span class="params">x</span> =&gt;</span> x == <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">3</span>, <span class="number">0</span>) <span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].entries() <span class="comment">// iterator [0, &quot;a&quot;], [1,&quot;b&quot;], [2,&quot;c&quot;]</span></span><br><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].keys() <span class="comment">// iterator 0, 1, 2</span></span><br><span class="line">[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].values() <span class="comment">// iterator &quot;a&quot;, &quot;b&quot;, &quot;c&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.assign(Point, &#123; <span class="attr">origin</span>: <span class="keyword">new</span> Point(<span class="number">0</span>,<span class="number">0</span>) &#125;)</span><br></pre></td></tr></table></figure><h3 id="Binary-and-Octal-Literals"><a href="#Binary-and-Octal-Literals" class="headerlink" title="Binary and Octal Literals"></a>Binary and Octal Literals</h3><p>Two new numeric literal forms are added for binary (<code>b</code>) and octal (<code>o</code>).</p><p>添加两个新的数值文字形式为二进制(“b”)和八进制(“o”)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;111110111&quot;</span>, <span class="number">2</span>) === <span class="number">503</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&quot;767&quot;</span>, <span class="number">8</span>) === <span class="number">503</span>;</span><br><span class="line"><span class="number">0</span>767 === <span class="number">503</span>; <span class="comment">// only in non-strict, backward compatibility mode</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="number">0b111110111</span> === <span class="number">503</span></span><br><span class="line"><span class="number">0o767</span> === <span class="number">503</span></span><br></pre></td></tr></table></figure><h3 id="Promises"><a href="#Promises" class="headerlink" title="Promises"></a>Promises</h3><p>Promises are a library for asynchronous programming.  Promises are a first class representation of a value that may be made available in the future.  Promises are used in many existing JavaScript libraries.</p><p>承诺模式是异步编程库。承诺是一个一个流的表示的值可能会在未来使用。承诺模式用于许多现有的JavaScript库。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">duration = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, duration);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = timeout(<span class="number">1000</span>).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hmm&quot;</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([timeout(<span class="number">100</span>), timeout(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msgAfterTimeout</span> (<span class="params">msg, who, timeout, onDone</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        onDone(msg + <span class="string">&quot; Hello &quot;</span> + who + <span class="string">&quot;!&quot;</span>);</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">&#125;</span><br><span class="line">msgAfterTimeout(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Foo&quot;</span>, <span class="number">100</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    msgAfterTimeout(msg, <span class="string">&quot;Bar&quot;</span>, <span class="number">200</span>, <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;done after 300ms:&quot;</span> + msg);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">msgAfterTimeout</span> (<span class="params">msg, who, timeout</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> resolve(<span class="string">`<span class="subst">$&#123;msg&#125;</span> Hello <span class="subst">$&#123;who&#125;</span>!`</span>), timeout)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">msgAfterTimeout(<span class="string">&quot;&quot;</span>, <span class="string">&quot;Foo&quot;</span>, <span class="number">100</span>).then(<span class="function">(<span class="params">msg</span>) =&gt;</span></span><br><span class="line">    msgAfterTimeout(msg, <span class="string">&quot;Bar&quot;</span>, <span class="number">200</span>)</span><br><span class="line">).then(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`done after 300ms:<span class="subst">$&#123;msg&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Reflect-API"><a href="#Reflect-API" class="headerlink" title="Reflect API"></a>Reflect API</h3><p>Full reflection API exposing the runtime-level meta-operations on objects.  This is effectively the inverse of the Proxy API, and allows making calls corresponding to the same meta-operations as the proxy traps.  Especially useful for implementing proxies.</p><p>完整的反射API公开运行时级meta-operations对象。这是一个有效的反向代理的API,并声明对应相同的meta-operations代理陷阱。实现代理尤其有用。</p><p>ES5与ES6对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ES5</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;b&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// no equivalent in ES5</span></span><br><span class="line"><span class="built_in">Object</span>.getOwnPropertyNames(obj); <span class="comment">// [ &quot;a&quot;, &quot;b&quot; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">&quot;b&quot;</span>, &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;)</span><br><span class="line">obj[<span class="built_in">Symbol</span>(<span class="string">&quot;c&quot;</span>)] = <span class="number">3</span></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj) <span class="comment">// [ &quot;a&quot;, &quot;b&quot;, Symbol(c) ]</span></span><br></pre></td></tr></table></figure><h3 id="Tail-Calls"><a href="#Tail-Calls" class="headerlink" title="Tail Calls"></a>Tail Calls</h3><p>Calls in tail-position are guaranteed to not grow the stack unboundedly.  Makes recursive algorithms safe in the face of unbounded inputs.</p><p>在尾部调用保证不是堆栈无限制地增长。使得在面对无限递归算法安全投入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, acc = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> acc;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * acc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stack overflow in most implementations today,</span></span><br><span class="line"><span class="comment">// but safe on arbitrary inputs in ES6</span></span><br><span class="line">factorial(<span class="number">100000</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;ECMAScript-6-git-io-es6features&quot;&gt;&lt;a href=&quot;#ECMAScript-6-git-io-es6features&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript 6 git.io/es6feature</summary>
      
    
    
    
    <category term="前端" scheme="https://blog.jddfe.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://blog.jddfe.com/tags/ES6/"/>
    
    <category term="JS" scheme="https://blog.jddfe.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Git常用命令备忘手册</title>
    <link href="https://blog.jddfe.com/2016/03/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E6%89%8B%E5%86%8C/"/>
    <id>https://blog.jddfe.com/2016/03/10/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98%E6%89%8B%E5%86%8C/</id>
    <published>2016-03-10T12:55:10.000Z</published>
    <updated>2020-11-10T13:49:03.329Z</updated>
    
    <content type="html"><![CDATA[<h4 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;robbin&quot;   </span><br><span class="line">git config --global user.email &quot;fankai@gmail.com&quot;</span><br><span class="line">git config --global color.ui true</span><br><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br><span class="line">git config --global core.editor &quot;mate -w&quot;    # 设置Editor使用textmate</span><br><span class="line">git config -l  # 列举所有配置</span><br></pre></td></tr></table></figure><h4 id="git常用命令-查看、添加、提交、删除、找回，重置修改文件"><a href="#git常用命令-查看、添加、提交、删除、找回，重置修改文件" class="headerlink" title="git常用命令:查看、添加、提交、删除、找回，重置修改文件**"></a>git常用命令:查看、添加、提交、删除、找回，重置修改文件**</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">git help &lt;command&gt;  # 显示command的help</span><br><span class="line">git show            # 显示某次提交的内容</span><br><span class="line">git show $id</span><br><span class="line"></span><br><span class="line">git co  -- &lt;file&gt;   # 抛弃工作区修改</span><br><span class="line">git co  .           # 抛弃工作区修改</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt;      # 将工作文件修改提交到本地暂存区</span><br><span class="line">git add .           # 将所有修改过的工作文件提交暂存区</span><br><span class="line"></span><br><span class="line">git rm &lt;file&gt;       # 从版本库中删除文件</span><br><span class="line">git rm &lt;file&gt; --cached  # 从版本库中删除文件，但不删除文件</span><br><span class="line"></span><br><span class="line">git reset &lt;file&gt;    # 从暂存区恢复到工作文件</span><br><span class="line">git reset -- .      # 从暂存区恢复到工作文件</span><br><span class="line">git reset --hard    # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改</span><br><span class="line"></span><br><span class="line">git ci &lt;file&gt;       </span><br><span class="line">git ci .</span><br><span class="line">git ci -a           # 将git add, git rm和git ci等操作都合并在一起做</span><br><span class="line">git ci -am &quot;some comments&quot;</span><br><span class="line">git ci --amend      # 修改最后一次提交记录</span><br><span class="line">git commit --amend  #修改最后一次提交注释的，利用–amend参数  </span><br><span class="line"></span><br><span class="line">git revert &lt;$id&gt;    # 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span><br><span class="line">git revert HEAD     # 恢复最后一次提交的状态</span><br></pre></td></tr></table></figure><h4 id="查看文件diff"><a href="#查看文件diff" class="headerlink" title="查看文件diff**"></a>查看文件diff**</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;file&gt;     # 比较当前文件和暂存区文件差异</span><br><span class="line">git diff</span><br><span class="line">git diff &lt;$id1&gt; &lt;$id2&gt;   # 比较两次提交之间的差异</span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较 </span><br><span class="line">git diff --staged   # 比较暂存区和版本库差异</span><br><span class="line">git diff --cached   # 比较暂存区和版本库差异</span><br><span class="line">git diff --stat     # 仅仅比较统计信息</span><br></pre></td></tr></table></figure><h4 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录**"></a>查看提交记录**</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br><span class="line">git log &lt;file&gt;      # 查看该文件每次提交记录</span><br><span class="line">git log -p &lt;file&gt;   # 查看每次详细修改内容的diff</span><br><span class="line">git log -p -2       # 查看最近两次详细修改内容的diff</span><br><span class="line">git log --stat      # 查看提交统计信息</span><br></pre></td></tr></table></figure><h2 id="git"><a href="#git" class="headerlink" title="git"></a><strong>git</strong></h2><p><strong>git 本地分支管理查看、切换、创建和删除分支</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git br -r           # 查看远程分支</span><br><span class="line">git br &lt;new_branch&gt; # 创建新的分支</span><br><span class="line">git br -v           # 查看各个分支最后提交信息</span><br><span class="line">git br --merged     # 查看已经被合并到当前分支的分支</span><br><span class="line">git br --no-merged  # 查看尚未被合并到当前分支的分支</span><br><span class="line"></span><br><span class="line">git co &lt;branch&gt;     # 切换到某个分支</span><br><span class="line">git co -b &lt;new_branch&gt; # 创建新的分支，并且切换过去</span><br><span class="line">git co -b &lt;new_branch&gt; &lt;branch&gt;  # 基于branch创建新的new_branch</span><br><span class="line"></span><br><span class="line">git co $id          # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="line">git co $id -b &lt;new_branch&gt;  # 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="line"></span><br><span class="line">git br -d &lt;branch&gt;  # 删除某个分支</span><br><span class="line">git br -D &lt;branch&gt;  # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br></pre></td></tr></table></figure><h4 id="分支合并和rebase"><a href="#分支合并和rebase" class="headerlink" title="分支合并和rebase**"></a>分支合并和rebase**</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch&gt;               # 将branch分支合并到当前分支</span><br><span class="line">git merge origin&#x2F;master --no-ff  # 不要Fast-Foward合并，这样可以生成merge提交</span><br><span class="line"></span><br><span class="line">git rebase master &lt;branch&gt;       # 将master rebase到branch，相当于：</span><br><span class="line">git co &lt;branch&gt; &amp;&amp; git rebase master &amp;&amp; git co master &amp;&amp; git merge &lt;branch&gt;</span><br></pre></td></tr></table></figure><h2 id="git补丁管理-方便在多台机器上开发同步时用"><a href="#git补丁管理-方便在多台机器上开发同步时用" class="headerlink" title="git补丁管理(方便在多台机器上开发同步时用)"></a><strong>git补丁管理(方便在多台机器上开发同步时用)</strong></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git diff &gt; ..&#x2F;sync.patch         # 生成补丁</span><br><span class="line">git apply ..&#x2F;sync.patch          # 打补丁</span><br><span class="line">git apply --check ..&#x2F;sync.patch  # 测试补丁能否成功</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="git暂存管理"><a href="#git暂存管理" class="headerlink" title="git暂存管理"></a>git暂存管理</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash                        # 暂存</span><br><span class="line">git stash list                   # 列所有stash</span><br><span class="line">git stash apply                  # 恢复暂存的内容</span><br><span class="line">git stash drop                   # 删除暂存区</span><br></pre></td></tr></table></figure><h4 id="git远程分支管理"><a href="#git远程分支管理" class="headerlink" title="git远程分支管理"></a>git远程分支管理</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git pull                         # 抓取远程仓库所有分支更新并合并到本地</span><br><span class="line">git pull --no-ff                 # 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="line">git fetch origin                 # 抓取远程仓库更新</span><br><span class="line">git merge origin&#x2F;master          # 将远程主分支合并到本地当前分支</span><br><span class="line">git co --track origin&#x2F;branch     # 跟踪某个远程分支创建相应的本地分支</span><br><span class="line">git co -b &lt;local_branch&gt; origin&#x2F;&lt;remote_branch&gt;  # 基于远程分支创建本地分支，功能同上</span><br><span class="line"></span><br><span class="line">git push                         # push所有分支</span><br><span class="line">git push origin master           # 将本地主分支推到远程主分支</span><br><span class="line">git push -u origin master        # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)</span><br><span class="line">git push origin &lt;local_branch&gt;   # 创建远程分支， origin是远程仓库名</span><br><span class="line">git push origin &lt;local_branch&gt;:&lt;remote_branch&gt;  # 创建远程分支</span><br><span class="line">git push origin :&lt;remote_branch&gt;  #先删除本地分支(git br -d &lt;branch&gt;)，然后再push删除远程分支</span><br></pre></td></tr></table></figure><h4 id="git远程仓库管理"><a href="#git远程仓库管理" class="headerlink" title="git远程仓库管理"></a>git远程仓库管理</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                    # 查看远程服务器地址和仓库名称</span><br><span class="line">git remote show origin           # 查看远程服务器仓库状态</span><br><span class="line">git remote add origin git@github:robbin&#x2F;robbin_site.git         # 添加远程仓库地址</span><br><span class="line">git remote set-url origin git@github.com:robbin&#x2F;robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="line">git remote rm &lt;repository&gt;       # 删除远程仓库</span><br></pre></td></tr></table></figure><h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git clone --bare robbin_site robbin_site.git  # 用带版本的项目创建纯版本仓库</span><br><span class="line">scp -r my_project.git git@git.csdn.net:~      # 将纯仓库上传到服务器上</span><br><span class="line"></span><br><span class="line">mkdir robbin_site.git &amp;&amp; cd robbin_site.git &amp;&amp; git --bare init # 在服务器创建纯仓库</span><br><span class="line">git remote add origin git@github.com:robbin&#x2F;robbin_site.git    # 设置远程仓库地址</span><br><span class="line">git push -u origin master                                      # 客户端首次提交</span><br><span class="line">git push -u origin develop    # 首次将本地develop分支提交到远程develop分支，并且track</span><br><span class="line"></span><br><span class="line">git remote set-head origin master   # 设置远程仓库的HEAD指向master分支</span><br></pre></td></tr></table></figure><h4 id="也可以命令设置跟踪远程库和本地库"><a href="#也可以命令设置跟踪远程库和本地库" class="headerlink" title="也可以命令设置跟踪远程库和本地库"></a>也可以命令设置跟踪远程库和本地库</h4><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream master origin&#x2F;master</span><br><span class="line">git branch --set-upstream develop origin&#x2F;develop</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;git配置&quot;&gt;&lt;a href=&quot;#git配置&quot; class=&quot;headerlink&quot; title=&quot;git配置&quot;&gt;&lt;/a&gt;git配置&lt;/h4&gt;&lt;hr&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu</summary>
      
    
    
    
    <category term="Git" scheme="https://blog.jddfe.com/categories/Git/"/>
    
    
    <category term="Git" scheme="https://blog.jddfe.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 5分钟搞定你的个人博客</title>
    <link href="https://blog.jddfe.com/2016/02/28/Hexo%205%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>https://blog.jddfe.com/2016/02/28/Hexo%205%E5%88%86%E9%92%9F%E6%90%9E%E5%AE%9A%E4%BD%A0%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</id>
    <published>2016-02-28T12:26:41.000Z</published>
    <updated>2020-11-10T16:11:43.338Z</updated>
    
    <content type="html"><![CDATA[<p>新年快乐，祝所有猿类们新的一年撸代码无bug！！！</p><p>新的一年，一切重新开始，重新折腾起来。Hexo 刚有发布了新版本，今天我们一起来通过Hexo快速搭建个人博客，并发布到 github。</p><p>废话不多说，进入正题。</p><p>开始前提：</p><ul><li><a href="https://nodejs.org/en/download/">安装 Node.js</a></li><li><a href="https://git-scm.com/download/win">安装Git</a> </li></ul><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>github 新建一个仓库，仓库名必须为 &lt; user-name &gt;.github.io 格式，其中 &lt; user-name &gt; 是你 github 的昵称。不要问我为什么，问了也不想告诉你。</p><h3 id="全局安装hexo"><a href="#全局安装hexo" class="headerlink" title="全局安装hexo"></a>全局安装hexo</h3><p>如果你连 <code>npm</code> 是啥都不知道，那对不起，你走吧。</p><p>等等等…开个玩笑，有啥问题可以留言。打开命令行，输入下面的命令，全局安装 hexo。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>hexo init，就会自动构建一个 hexo 项目，紧接着执行 hexo s，浏览器访问 localhost:4000 就可以看到效果啦！过程一定要快，凉了就不好吃了！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 初始化</span><br><span class="line">hexo init </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 本地运行</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h3 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h3><p>在项目根目录下找到 _congif.yml，找到 deploy 字段并填写完整</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https:&#x2F;&#x2F;hexo.io&#x2F;docs&#x2F;deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;你的仓库地址&gt; # https:&#x2F;&#x2F;github.com&#x2F;jddfe&#x2F;jddfe.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>虽然只有一份 Hello World，但是我也想让全世界的人看到，成为最闪耀的那个崽。接下来请开始你最擅长的事情：抄！</p><p>有了自己的内容后，需要额外的一个工具来帮助我们推到仓库上，就是 hexo-deployer-git。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>好了，见证奇迹的时候</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">hexo clean</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 生成静态文件，可简写 hexo g</span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 发布，简写 hexo d</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h3><p>至此，已经完成了个人博客的搭建，可以在浏览器中访问： <a href="https://jddfe.github.io/">https://jddfe.github.io</a></p><p><strong>其他hexo使用请参见官方文档</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;新年快乐，祝所有猿类们新的一年撸代码无bug！！！&lt;/p&gt;
&lt;p&gt;新的一年，一切重新开始，重新折腾起来。Hexo 刚有发布了新版本，今天我们一起来通过Hexo快速搭建个人博客，并发布到 github。&lt;/p&gt;
&lt;p&gt;废话不多说，进入正题。&lt;/p&gt;
&lt;p&gt;开始前提：&lt;/p&gt;
</summary>
      
    
    
    
    <category term="折腾不止" scheme="https://blog.jddfe.com/categories/%E6%8A%98%E8%85%BE%E4%B8%8D%E6%AD%A2/"/>
    
    
    <category term="Hexo GitPage" scheme="https://blog.jddfe.com/tags/Hexo-GitPage/"/>
    
  </entry>
  
</feed>
